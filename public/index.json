[{"authors":["admin"],"categories":null,"content":"I am a biostatistician specialising in Bayesian trial methodology at AstraZeneca. I have experience in cancer and non-cancer clinical trials. I have authored several methodology papers and conducted the analysis for several trial results publications. I write statistical software. By honourary association, I supervise trial methods research at the Cancer Research UK Clinical Trials Unit at the University of Birmingham.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1708958956,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.kristianbrock.com/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a biostatistician specialising in Bayesian trial methodology at AstraZeneca. I have experience in cancer and non-cancer clinical trials. I have authored several methodology papers and conducted the analysis for several trial results publications. I write statistical software. By honourary association, I supervise trial methods research at the Cancer Research UK Clinical Trials Unit at the University of Birmingham.","tags":null,"title":"Kristian Brock","type":"authors"},{"authors":null,"categories":null,"content":"Introduction I lead the bootcamp programme to teach technical skills to new biostatisticians at the Cancer Research UK Clinical Trials Unit, University of Birmingham. The programme was delivered for the first time during Sep-Dec 2019, consisting of 42 hours of tuition delivered over 21 sessions by 10 members of CRCTU\u0026rsquo;s Biostatistics team. Sessions were taught in computer laboratories and material was example-based so attendees devoted a lot of time to implementing what they were learning.\nA cornerstone of the programme was to teach methods for repeatable research, like using statistical software to automatically create reports and source control software to manage mission-critical code. The course also covered modern statistical approaches to common yet sometimes thorny tasks like dose-finding, sub-group analyses, Bayesian analysis, and modelling of repeated measures.\nBootcamp was primarily aimed at new recruits but statisticians with many years\u0026rsquo; experience also attended to develop their technical skills. Sessions were presented by members of the team in their particular field of expertise, creating an environment where the team educated itself. In some sessions, even the professors of biostatistics featured amongst the attendees.\nThe programme will be implemented again to train recruits in 2020, and expanded to cover further trials topics.\nMaterial Sessions are presented as learnr tutorials and packaged as an R-package called bootcamp hosted on GitHub.\nTo install the package on your computer, run\ndevtools::install_github('brockk/bootcamp')\nin R.\nRunning bootcamp tutorials Locally To run a tutorial locally, you use a command like:\nlearnr::run_tutorial('intro', package = 'bootcamp')\nYou can substitute intro above for:\n bootcamp intro folders git ggplot2 markdown rmarkdown snapshots tidyverse models repeatedmeasures subgroups stan  On RStudio Cloud You do not have to install bootcamp to use it, however. The tutorials are installed on a public RStudio Cloud instance at:\nhttps://rstudio.cloud/project/454702\nYou are free to run them there. Look for the Run.R file.\nFurther details are available at https://github.com/brockk/bootcamp. Please note, the bootcamp package is not on CRAN.\nHappy learning. Kristian Brock\n","date":1577491200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1579246482,"objectID":"c21d6b30d6e6d5e484ce0ffa3b73e1cb","permalink":"https://www.kristianbrock.com/courses/bootcamp/","publishdate":"2019-12-28T00:00:00Z","relpermalink":"/courses/bootcamp/","section":"courses","summary":"A programme to teach technical skills to new biostatisticians at the Cancer Research UK Clinical Trials Unit, University of Birmingham. Sessions are presented as learnr tutorials.","tags":null,"title":"bootcamp","type":"docs"},{"authors":null,"categories":null,"content":"Introduction I lead the Early Phase Clinical Trials module at the University of Birmingham. The module is a core part of the university\u0026rsquo;s new MSc in Clinical Trials. It runs over five consecutive days from 9th to 13th March 2020.\nDay One Day one is concerned with dose-finding trials. We learn about the fundamentals of dose-finding and the perennial yet underwhelming 3+3 method. We will perform hands-on analysis using R, RStudio and Shiny web apps to simulate virtual trials and observe how the 3+3 method comes unstuck. We also delve into some of the historic disasters that have occurred in dose-finding trials and look at features in the design and conduct that can ameliorate the dangers.\nDay Two Day two builds on the material from day one by introducing model-based dose-finding methods. We focus in particular on the continual reassessment method (CRM). We learn about model fitting and interpretation, and see the method in action in practical sessions. We then look at how model-based dose-finding trials are reported in journals. We finish the day by hearing testimony from a patient on a dose-finding trial at CRCTU.\nDay Three On day three we leave dose-finding behind and turn our focus to phase II trials. On this day we learn about the different approaches to phase II trials, including the suite of optimal designs with fixed sample size, like A\u0026rsquo;Hern\u0026rsquo;s, Simon\u0026rsquo;s two-stage, and Bryant \u0026amp; Day\u0026rsquo;s designs. We conclude with an interview of a patient from the Clarity trial at CRCTU.\nDay Four On day four, we cover advanced topics at phase II. This includes the use of surrogate outcomes when it is impossible to observe the clinical outcome of primary interest in a reasonable time frame. We also look at co-primary outcomes, and the roles of biomarkers and subgroups.\nDay Five Day five is a special day devoted to Complex and Innovative Designs, a group that includes basket trials, umbrella trials, and platform trials. These designs have proliferated in cancer in recent years as we have discovered many potential driver mutations, allowing trialists to investigate therapies that target specific genetic aberrations. We study examples run by the University of Birmingham\u0026rsquo;s two trials units. We then look at these designs from the point of view of a competent authority, like the MHRA, the EMA or the FDA.\nTo learn more, visit the course webpage at https://www.birmingham.ac.uk/postgraduate/courses/taught/med/pg-modules/early-phase-clinical-trials.aspx.\n","date":1577491200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1579246482,"objectID":"c8e361319c51b2ed52aeb7c6cab606d9","permalink":"https://www.kristianbrock.com/courses/epct/","publishdate":"2019-12-28T00:00:00Z","relpermalink":"/courses/epct/","section":"courses","summary":"A module of the MSc in Clinical Trials offered by the University of Birmingham, focussing on phase I and phase II clinical trials.","tags":null,"title":"Early Phase Clinical Trials","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577611673,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://www.kristianbrock.com/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["Kristian Brock"],"categories":["Research","Code"],"content":"  Mike Sweeting, Dan Slade, Dan Jackson and I (all of AstraZeneca) recently published a preprint (Sweeting et al. 2024) describing a simple method to improve efficiency when comparing dose-finding designs by simulation. The preprint is available here.\nIn a nutshell Typically, when we investigate the performance of a dose-finding design, we run simulations. If we are comparing several different designs (or variants of a design), we generally run simulations for each candidate design separately. We tend to do this because:\n this is how it is implemented in software; different designs are implemented in different packages; it might not strike us to do it differently.  However, this is inefficient. By running separate batches of simulations for different designs, we are effectively comparing different designs using different patients. It would be much more efficient to use the same simulated patients on each candidate design. Doing so would reduce the Monte Carlo (random) error inherent in using a finite number of iterations to estimate a limiting value.\nThe trouble is, dose-finding designs are adaptive, meaning some parameter of the trial (in this instance, the dose delivered and therefore the associated toxicity and efficacy probabilities) is dependent on the outcomes observed in other patients in the trial. Our solution is to effectively simulate all possible binary toxicity (and efficacy) outcomes for a patient in advance by using latent uniform variables on \\((0, 1)\\). These can be interpreted as patient-level propensities.\nTo illustrate, imagine a patient’s uniform toxicity propensity is sampled to be \\(u_1 = 0.36\\). This patient would be regarded as experiencing toxicity when treated at any dose with an associated toxicity probability exceeding 0.36. This allows the same patient to behave consistently when having its dose selected by different designs in simulation. The method works for toxicity-seeking designs like CRM, mTPI and BOIN; and also co-primary efficacy-toxicity designs like EffTox and BOIN12. Full details are in the paper.\nThe idea of using latent uniform variables to represent propensity to toxicity events has been proposed in different dose-finding contexts (O’Quigley, Paoletti, and Maccario 2002; Cheung 2014).\n Code implementation Our proposal is implemented in v0.1.8 of the escalation package (Brock, Slade, and Sweeting 2023), now uploaded to CRAN. escalation implements many different dose-finding designs with optional behaviour modifiers, making it perfect for comparing the performance of competing designs.\nTo illustrate, let us reproduce an example from the package vignettes, comparing the behaviour of the perennial 3+3 design and two variants of the CRM in a five-dose scenario. We start by defining the competing designs in a list with convenient names:\nlibrary(escalation) target \u0026lt;- 0.25 skeleton \u0026lt;- c(0.05, 0.1, 0.25, 0.4, 0.6) designs \u0026lt;- list( \u0026quot;3+3\u0026quot; = get_three_plus_three(num_doses = 5), \u0026quot;CRM\u0026quot; = get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_at_n(n = 12), \u0026quot;Stopping CRM\u0026quot; = get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_at_n(n = 12) %\u0026gt;% stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) ) Here we will compare three designs:\n 3+3; CRM without a toxicity stopping rule; and an otherwise identical CRM design with a toxicity stopping rule.  The names we provide will be reused.\nFor illustration we use only a modest number of replicates. Feel free to investigate more replicates yourself. We compare different designs using the simulate_compare function:\nnum_sims \u0026lt;- 100 true_prob_tox \u0026lt;- c(0.12, 0.27, 0.44, 0.53, 0.57) sims \u0026lt;- simulate_compare( designs, num_sims = num_sims, true_prob_tox = true_prob_tox ) ## Running 3+3 ## Running CRM ## Running Stopping CRM We provide a convenient function to quickly visualise how the probability of selecting each dose in each design evolved as the simulations progressed. The dose-levels are represented in the columns of this plot:\nconvergence_plot(sims) We can see immediately, for instance, that the designs generally agree that dose 2 is the best MTD candidate, and that the CRM designs are more likely to recommend doses 3 and 4. The differences between the two CRM variants are very small. We can be more precise by formally contrasting the probability of selecting each dose for each pair of designs:\nlibrary(dplyr) library(ggplot2) as_tibble(sims) %\u0026gt;% filter(n %% 5 == 0) %\u0026gt;% ggplot(aes(x = n, y = delta)) + geom_point(size = 0.4) + geom_linerange(aes(ymin = delta_l, ymax = delta_u)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;, col = \u0026quot;red\u0026quot;) + labs(x = \u0026quot;iteration\u0026quot;) + facet_grid(comparison ~ dose, labeller = labeller( .rows = label_both, .cols = label_both) ) All the work above is done by as_tibble(sims). The rest of the code is just plotting. The error bars here reflect 95% symmetric asymptotic normal confidence intervals. Change the alpha = 0.05 parameter when calling as_tibble(sims) to get confident intervals for a different significance level.\nWe see that, even with the very small sample size of 50 simulated trials, the CRM designs are significantly more likely to recommend dose 3 than the 3+3 design. In contrast, in this scenario there is very little difference at all between the two CRM variants.\nWe also provide functions to get and set the patient-level propensities, allowing comparison and reproduction in other software packages. Check out the “Comparing dose-escalation designs by simulation” vignette on the CRAN package page and the package documentation site.\n References Brock, Kristian, Daniel Slade, and Michael Sweeting. 2023. Escalation: Modular Approach to Dose Finding Clinical Trials. https://cran.r-project.org/package=escalation.  Cheung, Ying Kuen. 2014. “Simple Benchmark for Complex Dose Finding Studies.” Biometrics 70 (2): 389–97.  O’Quigley, John, Xavier Paoletti, and Jean Maccario. 2002. “Non-Parametric Optimal Design in Dose Finding Studies.” Biostatistics 3 (1): 51–56.  Sweeting, Michael, Daniel Slade, Daniel Jackson, and Kristian Brock. 2024. “Potential Outcome Simulation for Efficient Head-to-Head Comparison of Adaptive Dose-Finding Designs.” arXiv Preprint arXiv:2402.15460. https://arxiv.org/abs/2402.15460.    ","date":1708905600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1708960246,"objectID":"85c3d7e37496846242c5631543725332","permalink":"https://www.kristianbrock.com/post/comparing-dosefinding-simulations/","publishdate":"2024-02-26T00:00:00Z","relpermalink":"/post/comparing-dosefinding-simulations/","section":"post","summary":"A simple, efficient method for comparing dose-finding designs described in preprint and implemented in escalation v0.1.8","tags":["DoseFinding","escalation","R"],"title":"Comparing dose-finding designs by simulation","type":"post"},{"authors":["Kristian Brock"],"categories":["Opinion"],"content":" Statistics is hard. Computer programming is hard. To write accurate and reusable statistical software, you have to be good at both. And if you can do both, people should be high-fiving you in the street and gifting you Iberian hams.\nAll hail the statistical developers How many statisticians in their careers will need to fit a mixed-effects model? Almost all. How many will try different covariance structures or generalisations for binary and/or count data? Most. How many could write the code to fit such a model? Barely any.\nI do not mean how many statisticians could use existing tools to fit such a model. I mean how many statisticians, starting from scratch, facing an empty text file, writing R or C++ or Python or Julia or whatever, would have a cat in hell’s chance of producing code to fit a mixed-effects model with all the bells and whistles? I wouldn’t. The mere idea makes me want to lay down.\nChatting with a colleague, Nico Kist recently, he floated the idea that researchers need to be careful when they develop tools, because programmers are somehow perceived as less important than other researchers, like coding is the pursuit of those that cannot do proper research. Desk flesh. Code monkeys. Give them a giant bag of Cheesie Wotsits and stick on a Spiderman DVD and they will leave you alone.\nAnd I agreed with him. There is career risk, I think, in being seen as a programmer / researcher rather than out-and-out researcher. Perhaps there is some faulty application of zero-sum logic that diminishes your perceived talents if you also understand object oriented programming.\nBut this should not be the case! Nobody has done more to improve R in the last 10 years than Hadley Wickham. R was, to be blunt, an awkward language to use. The tidyverse has made modern R an actual joy to behold and something I recommend without qualification to every analyst.\nLikewise, Stan has completely changed the game in statistical modelling. The broad suite of packages in the Stan ecosystem has shoved us all miles forwards in statistical modelling, model checking, visualisation, model combination, probabilistic decision making, etc. I was so blown away when I realised the utterly bewildering array of statistical models that could be fit using brms that I wanted to carry the author, Paul-Christian Bürkner, aloft on a makeshift throne, like C3PO and the Ewoks at the end of Return of the Jedi.\nLooking at the R packages I have used in the last month, I have to say to the authors of dplyr, ggplot2, rlang, R6, httr, magrittr, glue, tibble, purrr, furrr, tidyselect, withr, Rcpp, RcppParallel, rstan, rstanarm, loo, brms, testthat, curl, jsonlite, V8, tidybayes, lattice, here, DoseFinding, patchwork, xtable, gtsummary, lme4, binom, broom, broom.mixed, RBesT, tidyr, forcats, lubridate, readxl, pwr, and devtools that you truly are the best amongst us. I owe you a ham.\n ","date":1613606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613645700,"objectID":"b5979b5046f15b4cfd6e4c47b3869490","permalink":"https://www.kristianbrock.com/post/praise-for-stats-developers/","publishdate":"2021-02-18T00:00:00Z","relpermalink":"/post/praise-for-stats-developers/","section":"post","summary":"Those that write statistical software sit at the intersection of two difficult disciplines. They are heroes.","tags":null,"title":"Praise for statistical developers","type":"post"},{"authors":["Kristian Brock"],"categories":["Research"],"content":" Intro I collaborate with lots of different researchers, helping them to analyse their data. For simplicity, they almost always send me data in an Excel spreadsheet. That is fine, but it is evidently not clear to most how to lay out the data to facilitate statistical analysis.\nBefore I can analyse the data, I have to import it. The way the data is saved really impacts how easy or hard it is to import. There are some common mistakes that lots of researchers make. The goal of this post is to describe how to lay out data in Excel so that it can be imported into R and analysed immediately.\n Rule 1 - start in cell A1 When importing data from Excel, what the computer expects is a solid rectangle of data starting in cell A1. Empty rows and columns may make the data more visually appealing to a human but they are guaranteed to confuse a computer.\nPut your first column header in cell A1, your second column header in B1, and so on. Then put your data in the subsequent rows, using one row for each observation or subject.\nThe computer will import values from cells as far out as the last non-empty column and as far down as the last non-empty row. This means you cannot slap explanatory notes below your block of data because, to a computer, your note looks like malformed data. If you want to provide notes, put them on a dedicated tab.\nHow not to do it:  Rule 2 - One data-type per column Broadly speaking, we work with numbers, text, and dates (which are in fact just a special type of number).\nWhen software imports data in columns, it works out the type of the column by inspecting the values in the individual cells. If every value in a column is a number, then the column will be treated as numerical. That is great because analysis (like calculating an average) can proceed with no fuss.\nHowever, all it takes is a single textual value in a column of otherwise numerical values for the entire column to be treated as text. This is because the datatype chosen for a column has to be valid for every value in the column and text is the catch-all scenario. If your column contains numbers, do not label missing values as “missing” or “not known” - just leave them blank.\nEqually, do not use inequalities like “\u0026lt; 0.5” because this too will be read as text and result in the entire column being treated as text. The case with inequalities is tricky and could perhaps be handled gracefully using separate columns for the observed value and the lower and/or upper thresholds of precision, where applicable.\nHow not to do it:  Rule 3 - Funky column names are $?^£ Column names must be unique. You cannot have two columns called “Data”, for instance. Thus, meaningful column names with an appropriate level of detail are important. However, column names should not be too complex. This is because they will have to be typed out when the column is used in the analysis. Each time a column name is typed, the chances of an error increase.\nCommon examples of excessively complex column names are those that:\n include units, like “Concentration (μmol/L)” enumerate the categorical levels, like “Sex (1=Female, 2=Male, 3=Non-binary, 4=Prefer not to say, 5=Missing)”  I advise that column names:\n use letters and numbers (but do not start with a number) do not use spaces or symbols  Capturing data from questionnaires can be tricky because there is a temptation to name the columns using the question text. This will almost surely result in cumbersome column names. In this situation, columns names “Q1”, “Q2”, etc are fine. However, it would be advisable to also include a data-dictionary tab where the exact question text is listed against the question number.\nHow not to do it:  Rule 4 - Be consistent When entering column names and textual data values, be aware that:\n Spelling matters: “Weather” is obviously different to “Whether”. Case matters: “Rainy” is different to “rainy”. Space matters: “Day of Week” is different to “DayofWeek”.  In Rule 3, I advocated not putting the levels of categorical variables in the column header because it is too prone to error. It is absolutely fine to use descriptive textual labels like “Rainy” and “Sunny” rather than codified numerical values. But when you choose your category values, stick with them. Subtle ways in which categorical variables frequently differ are in capitalisation and use of space.\nIf you want to codify categorical variables, that is fine but you it is advisable that you also include a data-dictionary tab where the codified values are listed against their textual values.\nHow not to do it:  Rule 5 - An empty cell is fine In Rule 2, I told you not to label missing values. An empty cell is absolutely fine. If an particular piece of information is missing, just leave the cell empty.\nHow not to do it:  Rule 6 - Stats software is colourblind Researchers like to use cell shading to group related columns and make their data sheets easier to navigate. That is absolutely fine…but do not expect stats software to detect your colouring, much less to understand what it means.\nIn particular, do not convey important information in the formatting. It will not work to use red shading or italics to convey approximate vs exact values, for instance. All information should be conveyed in a dedicated column. In this example, a column named MeasurementType taking values “Exact” and “Approximate” would be warranted.\nHow not to do it:  An ideal example Obey all of those rules and you should come up with something that looks like this:\nAn Excel sheet like this can be loaded into R and visualised or analysed immediately with no relabelling of columns, no re-casting of data-types, no data rejigging. Make your data easier to analyse to get the analysis back quicker.\n ","date":1604188800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604317015,"objectID":"d37bcb427bfe4eb74a6eceed15233d8d","permalink":"https://www.kristianbrock.com/post/send-me-data/","publishdate":"2020-11-01T00:00:00Z","relpermalink":"/post/send-me-data/","section":"post","summary":"If you want to send me data in an Excel sheet, laying it out like this will let me start analysing it right away.","tags":null,"title":"Sending me data in Excel","type":"post"},{"authors":["Kristian Brock"],"categories":["Code"],"content":" Introduction This week I updated the escalation (Brock 2020) package on CRAN with new methods to implement several phase I and phase I/II dose-finding designs. This post describes the addition of the phase I methods TPI, mTPI, and the logistic model method of Neuenschwander, Branson, and Gsponer (2008), and also the addition of MCMC-based CRM methods.\n TPI The toxicity probability interval (TPI) design was introduced by Ji, Li, and Bekele (2007). It is one of a series of dose-finding trial designs that works by partitioning the probability of toxicity into a set of intervals. These designs make dose-selection decisions that are determined by the interval in which the probability of toxicity for the current dose is believed to reside.\nCore to this design is a beta-binomial Bayesian conjugate model. For hyperparameters \\(\\alpha\\) and \\(\\beta\\), let the probability of toxicity at dose \\(i\\) be \\(p_i\\), with prior distribution\n\\[p_i \\sim Beta(\\alpha, \\beta).\\]\nIf \\(n_i\\) patients have been treated at dose \\(i\\), yielding \\(x_i\\) toxicity events, the posterior distribution is\n\\[ p_i | data \\sim Beta(\\alpha + x_{i}, \\beta + n_{i} - x_{i}).\\]\nUsing this distribution, let the standard deviation of \\(p_i\\) be denoted by \\(\\sigma_i\\). The design seeks a dose with probability of toxicity close to some pre-specified target level, \\(p_T\\). The entire range of possible values for \\(p_i\\) can be broken up into the following intervals:\n The underdosing interval (UI), defined as \\((0, p_{T} - K_{2} \\sigma_{i})\\); The equivalence interval (EI), defined as \\((p_{T} - K_{2} \\sigma_{i}, p_{T} + K_{1} \\sigma_{i})\\); The overdosing interval (OI), defined as \\((p_{T} + K_{1} \\sigma_{i}, 1)\\);  for pre-specified model constants, \\(K_1, K_2\\). These intervals are mutally-exclusive and mutually-exhaustive, meaning that every possible probability belongs to precisely one of them. In other words, these intervals form a partition of the probability space, \\((0, 1)\\).\nUsing the posterior distribution, we can calculate the three probabilities\n\\[p_{UI} = Pr(p_i \\in \\text{UI}), \\enspace p_{EI} = Pr(p_i \\in \\text{EI}), \\enspace p_{OI} = Pr(p_i \\in \\text{OI}).\\]\nBy definition, \\(p_{UI} + p_{EI} + p_{OI} = 1\\). The logical action in the dose-finding trial depends on which of these three probabilities is the greatest. If \\(p_{UI} \u0026gt; p_{EI}, p_{OI}\\), then the current dose is likely an underdose, so our desire should be to escalate dose to \\(i+1\\). In contrast, if \\(p_{OI} \u0026gt; p_{UI}, p_{EI}\\), then the current dose is likely an overdose and we will want to de-escalate dose to \\(i-1\\) for the next patient. If \\(p_{EI} \u0026gt; p_{UI}, p_{OI}\\), then the current dose is deemed sufficiently close to \\(p_T\\) and we will want to stay at dose-level \\(i\\).\nFurther to these rules regarding dose-selection, the following rule is used to avoid recommending dangerous doses. A dose is deemed inadmissible for being excessively toxic if\n\\[ Pr(p_{i} \u0026gt; p_{T} | data) \u0026gt; \\xi,\\]\nfor a certainty threshold, \\(\\xi\\). If a dose is excluded by this rule, it should not be recommended by the model. Irrespective the probabilities \\(p_{UI}, p_{EI}, p_{OI}\\), the design will recommend to stay at dose \\(i\\) rather than escalate to a dose previously identified as being inadmissible. Furthermore, the design will advocate stopping if the lowest dose is inferred to be inadmissible.\nIn their paper, the authors demonstrate acceptable operating performance using \\(\\alpha = \\beta = 0.005\\), \\(K_{1} = 1\\), \\(K_{2} = 1.5\\) and \\(\\xi = 0.95\\). See Ji, Li, and Bekele (2007) for full details.\nImplementation in escalation Let us specify the model that the authors investigate in their publication:\nlibrary(escalation) model \u0026lt;- get_tpi(num_doses = 5, target = 0.3, alpha = 0.005, beta = 0.005, k1 = 1, k2 = 1.5, exclusion_certainty = 0.95) As with all models in escalation, we fit the model to some outcomes using code like:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;1NNT\u0026#39;)  and learn the dose recommended for the next patient(s):\nfit %\u0026gt;% recommended_dose() ## [1] 1 In their Table 1, Ji, Li, and Bekele (2007) recommend some model choices based on notional cohort outcomes. We can reproduce their findings using, for example:\npaths \u0026lt;- model %\u0026gt;% get_dose_paths(cohort_sizes = 6, next_dose = 2) library(dplyr) as_tibble(paths) %\u0026gt;% select(outcomes, next_dose) %\u0026gt;% knitr::kable()   outcomes next_dose     2  NNNNNN 3  NNNNNT 2  NNNNTT 2  NNNTTT 1  NNTTTT 1  NTTTTT 1  TTTTTT 1    I.e. if there are six patients at the current dose, this particular parameterisation will only advocate escalation if exactly zero toxicities are seen. If one or two toxicities are seen, the design advocates staying at dose 2, otherwise deescalation is recommended.\n  mTPI The modified toxicity probability interval (mTPI) design was introduced by Ji et al. (2010). As the name suggests, it is a modification of the earlier TPI design. mTPI is very similar to TPI, again using a method that partitions the probability of toxicity into a set of intervals.\nThis design uses a beta-binomial Bayesian conjugate model. For hyperparameters \\(\\alpha\\) and \\(\\beta\\), let the probability of toxicity at dose \\(i\\) be \\(p_i\\), with prior distribution\n\\[p_i \\sim Beta(\\alpha, \\beta).\\]\nIf \\(n_i\\) patients have been treated at dose \\(i\\), yielding \\(x_i\\) toxicity events, the posterior distribution is\n\\[ p_i | data \\sim Beta(\\alpha + x_{i}, \\beta + n_{i} - x_{i}).\\]\nThe design seeks a dose with probability of toxicity close to some pre-specified target level, \\(p_T\\). The entire range of possible values for \\(p_i\\) can be broken up into the following intervals:\n The underdosing interval (UI), defined as \\((0, p_{T} - \\epsilon_{1})\\); The equivalence interval (EI), defined as \\((p_{T} - \\epsilon_{1}, p_{T} + \\epsilon_{2})\\); The overdosing interval (OI), defined as \\((p_{T} + \\epsilon_{2}, 1)\\);  for pre-specified model constants, \\(\\epsilon_{1}, \\epsilon_{2}\\). These intervals are mutally-exclusive and mutually-exhaustive, meaning that every possible probability belongs to precisely one of them. In other words, these intervals form a partition of the probability space, \\((0, 1)\\).\nFor a continuous random variable \\(X\\) with cumulative probability mass function \\(F(x)\\) (i.e. \\(Pr(X \u0026lt; x) = F(x)\\)), the authors define the unit probability mass (UPM) for an interval \\((a, b)\\) to be \\((F(b) - F(a)) / (b - a)\\). That is, the UPM is the probability mass in an interval divided by the width of the interval, and can be interpreted as the average probability density of the interval.\nThen, using the posterior distribution identified above, we calculate the three UPMs\n\\[UPM_{UI} = Pr(p_i \\in \\text{UI}) / (p_{T} - \\epsilon_{1}),\\] \\[UPM_{EI} = Pr(p_i \\in \\text{EI}) / (\\epsilon_{1} + \\epsilon_{2}),\\]\nand\n\\[UPM_{OI} = Pr(p_i \\in \\text{OI}) / (1 - p_{T} + \\epsilon_{2}).\\]\nThe logical action in the dose-finding trial depends on which of these three quantities is the greatest. If \\(UPM_{UI} \u0026gt; UPM_{EI}, UPM_{OI}\\), then the current dose is likely an underdose, so our desire should be to escalate dose to \\(i+1\\). In contrast, if \\(UPM_{OI} \u0026gt; UPM_{UI}, UPM_{EI}\\), then the current dose is likely an overdose and we will want to de-escalate dose to \\(i-1\\) for the next patient. If \\(UPM_{EI} \u0026gt; UPM_{UI}, UPM_{OI}\\), then the current dose is deemed sufficiently close to \\(p_T\\) and we will want to stay at dose-level \\(i\\).\nFurther to these rules regarding dose-selection, the following rule is used to avoid recommending dangerous doses. A dose is deemed inadmissible for being excessively toxic if\n\\[ Pr(p_{i} \u0026gt; p_{T} | data) \u0026gt; \\xi,\\]\nfor a certainty threshold, \\(\\xi\\). If a dose is excluded by this rule, it should not be recommended by the model. Irrespective the values of \\(UPM_{UI}, UPM_{EI}\\) and \\(UPM_{OI}\\), the design will recommend to stay at dose \\(i\\) rather than escalate to a dose previously identified as being inadmissible. Furthermore, the design will advocate stopping if the lowest dose is inferred to be inadmissible.\nIn their paper, the authors demonstrate acceptable operating performance using \\(\\alpha = \\beta = 1\\), \\(\\epsilon_{1} = 0.05\\), \\(\\epsilon_{2} = 0.05\\) and \\(\\xi = 0.95\\). See Ji et al. (2010) for full details.\nImplementation in escalation Again, let us investigate one of the parameterisations that the authors investigate in their publication:\nlibrary(escalation) model \u0026lt;- get_mtpi(num_doses = 5, target = 0.3, alpha = 1, beta = 1, epsilon1 = 0.05, epsilon2 = 0.05, exclusion_certainty = 0.95) As before, we fit the model and learn the dose recommended for the next patient(s) using:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;1NNT\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 1 In their Figure 2, the authors again enumerate model advice over a range of cohort outputs. Just as we did with TPI, enumerating the dose recommendations after a cohort of 6 has been treated at dose 2:\npaths \u0026lt;- model %\u0026gt;% get_dose_paths(cohort_sizes = 6, next_dose = 2) as_tibble(paths) %\u0026gt;% select(outcomes, next_dose) %\u0026gt;% knitr::kable()   outcomes next_dose     2  NNNNNN 3  NNNNNT 3  NNNNTT 2  NNNTTT 2  NNTTTT 1  NTTTTT 1  TTTTTT 1    We see that after 2NNNNNT, the mTPI advocates escalation whereas TPI advocated sticking at dose 2. The advice from the two models matches in all other outcomes in this particular example.\n  Neuenschwander et al. Neuenschwander, Branson, and Gsponer (2008) (NBG) introduced a derivative of the CRM for dose-escalation clinical trials using the model:\n\\[ \\text{logit} p_i = \\alpha + \\exp{(\\beta)} \\log{(x_i / d^*)}, \\]\nwhere \\(p_i\\) is the probability of toxicity at the \\(i\\)th dose, \\(x_i\\), and \\(d^*\\) is a reference dose. Here \\(\\alpha\\) and \\(\\beta\\) are model parameters on which the authors place a bivariate normal prior. This model is very similar to the two-parameter logistic CRM. However, a notable difference is that the dose, \\(x_i\\), enters the model as a covariate. This dispenses with the toxicity skeleton that is used in the CRM.\nImplementation in escalation The heavy lifting required to fit the model is performed by trialr and rstan. escalation merely composes the model fit in such a way that it can be used with the other dose-selection modules.\nFor illustration, let us reproduce the analysis in Neuenschwander, Branson, and Gsponer (2008) that the authors used to demonstrate the flexibility of a two-parameter approach. In a trial of 15 doses, the investigators saw outcomes:\nlibrary(escalation) dose \u0026lt;- c(1, 2.5, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 150, 200, 250) outcomes \u0026lt;- \u0026#39;1NNN 2NNNN 3NNNN 4NNNN 7TT\u0026#39; Creating a dose-escalation model with NBG’s parameters:\nmodel \u0026lt;- get_trialr_nbg(real_doses = dose, d_star = 250, target = 0.3, alpha_mean = 2.15, alpha_sd = 0.84, beta_mean = 0.52, beta_sd = 0.8, seed = 2020) and fitting the model to the observed outcomes:\nfit \u0026lt;- model %\u0026gt;% fit(outcomes) fit ## Patient-level data: ## # A tibble: 17 x 4 ## Patient Cohort Dose Tox ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 1 1 1 0 ## 2 2 1 1 0 ## 3 3 1 1 0 ## 4 4 2 2 0 ## 5 5 2 2 0 ## 6 6 2 2 0 ## 7 7 2 2 0 ## 8 8 3 3 0 ## 9 9 3 3 0 ## 10 10 3 3 0 ## 11 11 3 3 0 ## 12 12 4 4 0 ## 13 13 4 4 0 ## 14 14 4 4 0 ## 15 15 4 4 0 ## 16 16 5 7 1 ## 17 17 5 7 1 ## ## Dose-level data: ## # A tibble: 15 x 7 ## RealDose dose tox n empiric_tox_rate mean_prob_tox median_prob_tox ## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 0 3 0 0.0117 0.00511 ## 2 2.5 2 0 4 0 0.0306 0.0186 ## 3 5 3 0 4 0 0.0644 0.0468 ## 4 10 4 0 4 0 0.134 0.114 ## 5 15 5 0 0 NaN 0.202 0.185 ## 6 20 6 0 0 NaN 0.264 0.251 ## 7 25 7 2 2 1 0.322 0.314 ## 8 30 8 0 0 NaN 0.374 0.370 ## 9 40 9 0 0 NaN 0.463 0.466 ## 10 50 10 0 0 NaN 0.535 0.543 ## 11 75 11 0 0 NaN 0.662 0.678 ## 12 100 12 0 0 NaN 0.741 0.760 ## 13 150 13 0 0 NaN 0.829 0.849 ## 14 200 14 0 0 NaN 0.875 0.894 ## 15 250 15 0 0 NaN 0.902 0.920 ## ## The model targets a toxicity level of 0.3. ## The model advocates continuing at dose 7. we see that dose 7 is selected for the next cohort using the metric of selecting the dose with posterior expected probability of toxicity closest to the target. In the above output, mean_prob_tox broadly matches the values plotted in the lower right panel of Figure 1 in Neuenschwander, Branson, and Gsponer (2008).\n Further work There are a few minor shortcomings of the NBG implementation in escalation \u0026amp; trialr. Firstly, NBG propose a bivariate normal prior distribution on \\(\\alpha\\) and \\(\\beta\\). However, the implementation in trialr currently uses independent normal priors. Hopefully, this will be addressed in a future release of trialr.\nFurthermore, NBG propose a method for selecting dose that accounts for the probability of recommending an overdose. That logic is currently not implemented in escalation, but will be in the near future.\n  MCMC CRM escalation already provides one-parameter CRM models via the dfcrm package (Cheung 2013). It now also provides MCMC implementations of those same one-parameter models:\nskeleton \u0026lt;- c(0.05, 0.12, 0.25, 0.40, 0.55) target \u0026lt;- 0.25 model1 \u0026lt;- get_trialr_crm(skeleton = skeleton, target = target, model = \u0026#39;empiric\u0026#39;, beta_sd = 1) model2 \u0026lt;- get_trialr_crm(skeleton = skeleton, target = target, model = \u0026#39;logistic\u0026#39;, a0 = 3, beta_mean = 0, beta_sd = 1) and also adds a two-parameter logistic model:\nmodel3 \u0026lt;- get_trialr_crm(skeleton = skeleton, target = target, model = \u0026#39;logistic2\u0026#39;, alpha_mean = 0, alpha_sd = 2, beta_mean = 0, beta_sd = 1) For more on the parameterisation of these methods, check out the CRM vignette in the escalation.\n Simulations and dose-paths As with all methods in escalation, simulations are supported right out of the box.\nFor illustration, Ji, Li, and Bekele (2007) present a simulation study to compare the performance of their TPI design to some alternatives. They specify a design that uses a maximum sample size of thirty patients:\nmodel \u0026lt;- get_tpi(num_doses = 8, target = 0.25, k1 = 1, k2 = 1.5, exclusion_certainty = 0.95) %\u0026gt;% stop_at_n(n = 30) and their scenario 1 assumes true probability of toxicity:\nsc1 \u0026lt;- c(0.05, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95) We can then reproduce their simulated characteristics by running:\nset.seed(123) sims \u0026lt;- model %\u0026gt;% simulate_trials(num_sims = 50, true_prob_tox = sc1, next_dose = 1) sims ## Number of iterations: 50 ## ## Number of doses: 8 ## ## True probability of toxicity: ## 1 2 3 4 5 6 7 8 ## 0.05 0.25 0.50 0.60 0.70 0.80 0.90 0.95 ## ## Probability of recommendation: ## NoDose 1 2 3 4 5 6 7 8 ## 0.00 0.14 0.76 0.10 0.00 0.00 0.00 0.00 0.00 ## ## Probability of administration: ## 1 2 3 4 5 6 7 8 ## 0.226 0.606 0.160 0.008 0.000 0.000 0.000 0.000 ## ## Sample size: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 30 30 30 30 30 30 ## ## Total toxicities: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.00 6.00 7.00 7.44 9.00 11.00 ## ## Trial duration: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 15.30 27.50 30.75 30.65 34.90 42.30 For the sake of speed, we ran just fifty iterations but in a real situation, many thousands of iterations would be more appropriate.\n Conclusion Amongst pure phase I designs, escalation now supports:\n CRM TPI mTPI BOIN NBG  It also supports some designs that select dose by co-primary efficacy and toxicity outcomes, the so-called seamless phase I/II designs. Those will be the subect of the next post on this blog. Til then, good day.\n References Brock, Kristian. 2020. Escalation: Modular Approach to Dose Finding Clinical Trials. https://CRAN.R-project.org/package=escalation.\n Cheung, Ken. 2013. Dfcrm: Dose-Finding by the Continual Reassessment Method. https://CRAN.R-project.org/package=dfcrm.\n Ji, Yuan, Yisheng Li, and B. Nebiyou Bekele. 2007. “Dose-finding in phase I clinical trials based on toxicity probability intervals.” Clinical Trials 4 (3): 235–44. https://doi.org/10.1177/1740774507079442.\n Ji, Yuan, Ping Liu, Yisheng Li, and B. Nebiyou Bekele. 2010. “A modified toxicity probability interval method for dose-finding trials.” Clinical Trials 7 (6): 653–63. https://doi.org/10.1177/1740774510382799.\n Neuenschwander, Beat, Michael Branson, and Thomas Gsponer. 2008. “Critical aspects of the Bayesian approach to phase I cancer trials.” Statistics in Medicine 27: 2420–39. https://doi.org/10.1002/sim.3230.\n   ","date":1603152000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603198306,"objectID":"33e0c3f6373747710c43d520e01e5908","permalink":"https://www.kristianbrock.com/post/new-phase1-escalation-methods/","publishdate":"2020-10-20T00:00:00Z","relpermalink":"/post/new-phase1-escalation-methods/","section":"post","summary":"Introducing new methods in `escalation` for TPI, mTPI and Neuenschwander et al.'s design for phase I trials, plus MCMC-based CRM methods.","tags":["escalation","R","DoseFinding"],"title":"New phase I methods in escalation","type":"post"},{"authors":["Kristian Brock"],"categories":["Code"],"content":" Summary This post sets out how two of my R packages, trialr and escalation, will work together and grow in the future.\n Background trialr (Brock 2020b; Brock 2019) is a package I wrote to fit complex Bayesian clinical trial models using Stan. Because I generally work on early phase trials, and because early phase trials are generally predisposed to Bayesian methods, the package ended up containing quite a few dose-finding methods like CRM (O’Quigley, Pepe, and Fisher 1990) and EffTox (Thall and Cook 2004). I initially added code to this package that would aid practical implementation of these methods, like conducting simulation studies and calculating future dose-paths.\nLater I introduced the escalation (Brock 2020a) package, containing a more general range of dose-finding methods (i.e. not just those that require MCMC methods for model-fitting). The beauty of escalation is that formalises the interface for dose-finding designs. For instance, all methods recommend a dose through the recommended_dose() function and distinguish between the need to stop or continue via the continue() function. This standard interface allows the elements of designs to become modules that can be arbitrarily combined.\nFor example, escalation allows you to start with a CRM model, add behaviour to stop when a certain sample size is reached, but ensure that the recommended dose is evaluated in at least \\(n\\) patients before stopping is permitted, all the while monitoring for excess toxicity at the lowest dose. Because all of the modules obey the same interface, they can be combined in arbitrary ways to tailor the behaviour of designs. The module that stops a trial when a target sample size is reached works whether it is preceded by a CRM design or BOIN design, for instance.\n Do we need both? By the time escalation was released, there was quite a bit of overlap between trialr and escalation. So do we need both? Yes, and I will explain why! Is trialr now redundant? Not at all, but it will become more focused.\nescalation went far further than trialr in making dose-finding designs hot-swappable and customisable. It makes sense that inferential tools like running simulations are offered in escalation so that comparing designs is easy.\ntrialr still has its place, however. It takes care of fitting models to data using MCMC via Stan. This is a reliable way of fitting complex (e.g. non-linear, multi-parameter) models when other methods struggle. Henceforth, trialr will focus only on Stan-based MCMC model-fitting.\nescalation will now use trialr alongside dose-finding packages from other authors like dfcrm (Cheung 2013) and BOIN (Yuan and Liu 2018) to support the broadest possible array of dose-escalation methods.\n How might this look in future? One of my near term goals is to add dose-response models to trialr like Emax. Dose-response modelling is a topic close to dose-finding trials but quite distinct from it. When I add the Emax model, the Stan implementation will go in trialr. If the Emax model stands to be useful as a dose-selection tool, then it can be added to support the usual methods in the escalation package.\n The situation now I recently updated both packages on CRAN:\n trialr is now at v0.1.5 at https://CRAN.R-project.org/package=trialr escalation is now at v0.1.4 at https://CRAN.R-project.org/package=escalation  escalation now depends on trialr to deliver Stan-MCMC implementations of CRM, EffTox, and the phase I method of Neuenschwander, Branson, and Gsponer (2008).\n References Brock, Kristian. 2019. “trialr: Bayesian Clinical Trial Designs in R and Stan.” arXiv E-Prints, June, arXiv:1907.00161.\n Brock, Kristian. 2020a. Escalation: Modular Approach to Dose Finding Clinical Trials. https://CRAN.R-project.org/package=escalation.\n ———. 2020b. Trialr: Clinical Trial Designs in ’Rstan’. https://CRAN.R-project.org/package=trialr.\n Cheung, Ken. 2013. Dfcrm: Dose-Finding by the Continual Reassessment Method. https://CRAN.R-project.org/package=dfcrm.\n Neuenschwander, Beat, Michael Branson, and Thomas Gsponer. 2008. “Critical aspects of the Bayesian approach to phase I cancer trials.” Statistics in Medicine 27: 2420–39. https://doi.org/10.1002/sim.3230.\n O’Quigley, J, M Pepe, and L Fisher. 1990. “Continual Reassessment Method: A Practical Design for Phase 1 Clinical Trials in Cancer.” Biometrics 46 (1): 33–48. https://doi.org/10.2307/2531628.\n Thall, PF, and JD Cook. 2004. “Dose-Finding Based on Efficacy-Toxicity Trade-Offs.” Biometrics 60 (3): 684–93.\n Yuan, Ying, and Suyu Liu. 2018. BOIN: Bayesian Optimal Interval (Boin) Design for Single-Agent and Drug- Combination Phase I Clinical Trials. https://CRAN.R-project.org/package=BOIN.\n   ","date":1603065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603115681,"objectID":"aefc1a2cb9e6c3adb077f76444ad968d","permalink":"https://www.kristianbrock.com/post/trialr-and-escalation/","publishdate":"2020-10-19T00:00:00Z","relpermalink":"/post/trialr-and-escalation/","section":"post","summary":"The `trialr` package, the `escalation` package, how they work together, and how they will grow.","tags":["escalation","trialr","R","DoseFinding"],"title":"trialr and escalation","type":"post"},{"authors":["Kristian Brock"],"categories":["Code"],"content":" Introduction I was drafting a review recently where I wanted to cite 122 papers (the subjects of the review) in one reference. Ordinarily, I use the citation managers Zotero and Mendeley. I could have imported all 122 PDFs into Zotero and then output the citations in a BibTeX file. However, that felt like too much manual work so I searched for a more automated way.\nI had a list of 122 DOIs and I wanted the BibTeX entry for each. My suspicion was that there would be an R package to automate this task. That is how I stumbled across the rcrossref package by Chamberlain et al. (2020).\n Demonstration of rcrossref rcrossref is on CRAN so you can install it in the usual way:\ninstall.packages(\u0026#39;rcrossref\u0026#39;) Let me immodestly demonstrate the package by fetching a BibTeX entry for one of my own papers (my first, in fact). You simply call the cr_cn function with the DOI you seek:\nlibrary(rcrossref) doi \u0026lt;- \u0026#39;10.1186/s12874-017-0381-x\u0026#39; refs \u0026lt;- cr_cn(dois = doi, format = \u0026quot;bibtex\u0026quot;) The citation can be returned in one of many formats. As stated, I want BibTeX.\nLet’s see the result:\nwriteLines(refs) ## @article{Brock_2017, ## doi = {10.1186/s12874-017-0381-x}, ## url = {https://doi.org/10.1186%2Fs12874-017-0381-x}, ## year = 2017, ## month = {jul}, ## publisher = {Springer Science and Business Media {LLC}}, ## volume = {17}, ## number = {1}, ## author = {Kristian Brock and Lucinda Billingham and Mhairi Copland and Shamyla Siddique and Mirjana Sirovica and Christina Yap}, ## title = {Implementing the {EffTox} dose-finding design in the Matchpoint trial}, ## journal = {{BMC} Medical Research Methodology} ## } Perfect.\n The bulk solution Having fetched one example successfully, I imagined a viable solution would be to write a for-loop. However, the solution I used was even simpler than that. You can send in a vector of DOIs via the dois parameter. Let me add another of my pivotal world-changing research papers to illustrate the point:\ndoi \u0026lt;- c( \u0026#39;10.1186/s12874-017-0381-x\u0026#39;, \u0026#39;10.1016/S2213-2600(20)30033-3\u0026#39; ) refs \u0026lt;- cr_cn(dois = doi, format = \u0026quot;bibtex\u0026quot;) The refs object is now a list of two BibTeX entries. Writing those references to a text stream is slightly more awkward than before:\nwriteLines(unlist(lapply(refs, paste, collapse=\u0026quot; \u0026quot;))) ## @article{Brock_2017, ## doi = {10.1186/s12874-017-0381-x}, ## url = {https://doi.org/10.1186%2Fs12874-017-0381-x}, ## year = 2017, ## month = {jul}, ## publisher = {Springer Science and Business Media {LLC}}, ## volume = {17}, ## number = {1}, ## author = {Kristian Brock and Lucinda Billingham and Mhairi Copland and Shamyla Siddique and Mirjana Sirovica and Christina Yap}, ## title = {Implementing the {EffTox} dose-finding design in the Matchpoint trial}, ## journal = {{BMC} Medical Research Methodology} ## } ## @article{Middleton_2020, ## doi = {10.1016/s2213-2600(20)30033-3}, ## url = {https://doi.org/10.1016%2Fs2213-2600%2820%2930033-3}, ## year = 2020, ## month = {mar}, ## publisher = {Elsevier {BV}}, ## author = {Gary Middleton and Kristian Brock and Joshua Savage and Rhys Mant and Yvonne Summers and John Connibear and Riyaz Shah and Christian Ottensmeier and Paul Shaw and Siow-Ming Lee and Sanjay Popat and Colin Barrie and Gloria Barone and Lucinda Billingham}, ## title = {Pembrolizumab in patients with non-small-cell lung cancer of performance status 2 ({PePS}2): a single arm, phase 2 trial}, ## journal = {The Lancet Respiratory Medicine} ## } Having mastered that, however, writing the BibTeX entries to a file was a piece of cake:\nmyfile = file(\u0026#39;~/bibliography.bib\u0026#39;) writeLines(unlist(lapply(refs, paste, collapse=\u0026quot; \u0026quot;)), con = myfile) Job done? Not quite.\nThere was, in fact, one more challenge to overcome. To cite the papers in \\(\\LaTeX\\), I would need the 122 citation keys, i.e. the identifying labels that come after the @article{. We can see that CrossRef, the service that converts the DOI into a BibTeX citation, labels papers using the pattern author_yyyy. I extracted the citation keys using a bit of RegEx and the stringr and purrr packages:\nlibrary(purrr) library(stringr) cite_keys \u0026lt;- refs %\u0026gt;% map_chr(~ str_extract(.x, pattern = \u0026#39;\\\\@article\\\\{[A-Za-z_]*[0-9]+\u0026#39;)) %\u0026gt;% map_chr(~ str_extract(.x, pattern = \u0026#39;[A-Za-z_]*[0-9]+\u0026#39;)) cite_keys ## [1] \u0026quot;Brock_2017\u0026quot; \u0026quot;Middleton_2020\u0026quot; I am not great at RegEx so I imagine there is a better way of doing that, but my method worked. Importantly, the above will work with double-barreled names like name1_name2_yyyy. Finally, I pasted the contents of cite_keys into my tex file.\n End product This is the end result:\nOne hundred and twenty-two consecutive references compacted into one reference, as required.\n References Chamberlain, Scott, Hao Zhu, Najko Jahn, Carl Boettiger, and Karthik Ram. 2020. Rcrossref: Client for Various ’Crossref’ ’Apis’. https://CRAN.R-project.org/package=rcrossref.\n   ","date":1595721600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595773753,"objectID":"931589f1cbe0fd65cae90cfd7b96ba78","permalink":"https://www.kristianbrock.com/post/using-rcrossref/","publishdate":"2020-07-26T00:00:00Z","relpermalink":"/post/using-rcrossref/","section":"post","summary":"Fetching lots of BibTeX citations is simple using `rcrossref`","tags":["R"],"title":"Fetching BibTeX citations using rcrossref","type":"post"},{"authors":["Kristian Brock"],"categories":["Research"],"content":" Introduction Let’s say we have some outcomes observed at different doses or exposures of some intervention. Those data might look like this:\nlibrary(ggplot2) library(dplyr) df \u0026lt;- tibble( Exposure = c(10, 25, 50, 75, 100, 150, 300, 400), Response = c(0.03, 0.04, 0.15, 0.12, 0.25, 0.43, 0.54, 0.47) ) df %\u0026gt;% ggplot(aes(x = Exposure, y = Response)) + geom_point() Exposure-response relationships are incredibly common in medical research. They do not just arise in phase I trials.\nThe response variable could be interpreted as:\n the average level of target inhibition; the average concentration in serum; the percentage of subjects in a sample experiencing an event.  Likewise, the exposure variable could be interpreted as:\n the prevalence of some characteristic in a population; time spent in a certain state; the quantity of molecule popped into a patient’s mouth.  So how would we analyse data like this? An ordinary linear model looks a bit of a stretch because the response variable appears to stop increasing at high exposures. A generalised linear model (GLM) might be a fruitful approach.\nHere is a logit model fit to the data:\nlibrary(broom) df %\u0026gt;% glm(data = ., formula = Response ~ Exposure, family = binomial(\u0026#39;logit\u0026#39;)) %\u0026gt;% augment() %\u0026gt;% mutate(Response = gtools::inv.logit(.fitted)) %\u0026gt;% ggplot(aes(x = Exposure, y = Response)) + geom_line() + geom_point(data = df) and here is a probit model:\ndf %\u0026gt;% glm(data = ., formula = Response ~ Exposure, family = binomial(\u0026#39;probit\u0026#39;)) %\u0026gt;% augment() %\u0026gt;% mutate(Response = gtools::inv.logit(.fitted)) %\u0026gt;% ggplot(aes(x = Exposure, y = Response)) + geom_line() + geom_point(data = df) These fits are awful. Both of these GLM approaches suffer from the same simple problem; they assume that the event probability tends to 1 as the linear predictor tends to infinity. Put another way, there is no way for the response curve to asymptote to some value other than 1.0. This bakes into the analysis that an event probability of 1.0 is not only possible, but guaranteed, given high enough exposure. In many situations, this assumption is inappropriate.\nSo what might we do instead?\nThe Emax Model Emax is a non-linear model for estimating dose-response curves.\nThe general model form is:\n\\[ R_i = E_o + \\frac{D_i^N \\times E_{max}}{D_i^N + {ED}_{50}^N}\\]\nwhere:\n \\(R_i\\) is the response for experimental unit \\(i\\); \\(D_i\\) is the exposure (or dose) of experimental unit \\(i\\); \\(E_0\\) is the expected response when exposure is zero, or the zero-dose effect, or the basal effect; \\(E_{max}\\) is the maximum effect attributable to exposure; \\(ED_{50}\\) is the exposure that produces half of \\(E_{max}\\); \\(N \u0026gt; 0\\) is the slope factor, determining the steepness of the dose-response curve.  Macdougall (2006) gives a fantastic introduction to the method, providing excellent interpretation of the parameters and summaries of the main model extensions. We have borrowed here their notation and elementary explanation of model terms.\nThe model variant above is called the sigmoidal Emax model. The variant with \\(N\\) fixed to take the value 1 is called the hyperbolic model.\nFitting this model to some data means estimating values for the free parameters, \\(E_0, E_{max}, ED_{50}\\), and possibly \\(N\\), conditional on the observed \\(R_i\\) and \\(D_i\\).\nFortunately, there are packages in R that will fit this model. We introduce maximum likelihood and Bayesian approaches below.\n Maximum likelihood methods Bornkamp (2019) provides a function in the DoseFinding package for fitting both the hyperbolic and sigmoidal model variants.\nWe demonstrate first the hyperbolic approach, fitting it to our manufactured dataset:\nlibrary(DoseFinding) emax0 \u0026lt;- fitMod(Exposure, Response, data = df, model = \u0026quot;emax\u0026quot;) plot(emax0) By default, the package uses lattice-type graphics. We see that the model fit is much better than the GLM approaches above. To see the estimated parameters, we run:\nsummary(emax0) ## Dose Response Model ## ## Model: emax ## Fit-type: normal ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.08579 -0.03974 0.00223 0.02980 0.08854 ## ## Coefficients with approx. stand. error: ## Estimate Std. Error ## e0 -0.052 0.079 ## eMax 0.827 0.172 ## ed50 162.962 117.031 ## ## Residual standard error: 0.0698 ## Degrees of freedom: 5 We now fit the sigmoidal model. This simply involves calling the same function with a different model parameter:\nemax1 \u0026lt;- fitMod(Exposure, Response, data = df, model = \u0026quot;sigEmax\u0026quot;) plot(emax1) It is clear that the extra parameter dramatically improves the model fit. Glimpsing the parameter values:\nsummary(emax1) ## Dose Response Model ## ## Model: sigEmax ## Fit-type: normal ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.0721 -0.0154 0.0120 0.0251 0.0389 ## ## Coefficients with approx. stand. error: ## Estimate Std. Error ## e0 0.0594 0.0324 ## eMax 0.4515 0.0535 ## ed50 107.0215 11.5670 ## h 4.1370 1.6398 ## ## Residual standard error: 0.0497 ## Degrees of freedom: 4 we learn that the \\(N\\) parameter (which they call h to keep us on our toes) is not particularly consistent with the value 1. The extra degree of freedom has roughly halved the estimated value of \\(E_{max}\\) and more than halved the associated standard error.\n Bayesian methods The rstanemax package by Yoshida (2019) implements a Bayesian version of Emax, offloading MCMC sampling to the miracle software Stan (Carpenter et al. 2016).\nFitting the sigmoidal model is as simple as running code like:\nlibrary(rstanemax) stan1 \u0026lt;- stan_emax(Response ~ Exposure, data = df, gamma.fix = NULL, seed = 12345, cores = 4, control = list(adapt_delta = 0.95)) stan1 ## Inference for Stan model: emax. ## 4 chains, each with iter=2000; warmup=1000; thin=1; ## post-warmup draws per chain=1000, total post-warmup draws=4000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## emax 0.51 0.00 0.12 0.35 0.44 0.48 0.55 0.86 681 1 ## e0 0.04 0.00 0.04 -0.05 0.02 0.05 0.07 0.12 1409 1 ## ec50 122.33 1.76 45.01 81.81 100.91 110.81 124.89 257.70 651 1 ## gamma 3.66 0.06 2.03 0.96 2.18 3.32 4.74 8.67 1220 1 ## sigma 0.07 0.00 0.03 0.03 0.05 0.06 0.08 0.14 923 1 ## ## Samples were drawn using NUTS(diag_e) at Wed May 13 19:15:55 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). The \\(N\\) parameter in this package is referred to as gamma (still with me?) and the gamma.fix = NULL argument causes the variable to be estimated from the data. The argument name suggests you can provide your own fixed value - I have not investigated. To fit the hyperbolic version, you just omit the gamma.fix argument.\nWe see that there is a little bit of difference in each of the estimated variables but nothing to get alarmed about.\nThe package also provides a nice way of fetching predicted values:\nsamp \u0026lt;- rstanemax::posterior_predict( stan1, returnType = \u0026quot;tibble\u0026quot;, newdata = tibble(exposure = seq(0, 400, length.out = 100))) samp %\u0026gt;% head(10) %\u0026gt;% knitr::kable()   mcmcid exposure emax e0 ec50 gamma sigma respHat response    100 0.000000 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07183650 -0.2860366  100 4.040404 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07187133 0.3240279  100 8.080808 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07206919 0.2041787  100 12.121212 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07254184 0.0818142  100 16.161616 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07338111 -0.0172850  100 20.202020 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07466294 0.1978203  100 24.242424 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07644671 0.2342920  100 28.282828 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.07877353 0.0095302  100 32.323232 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.08166463 -0.0747148  100 36.363636 0.1712489 0.0718365 89.70576 2.741876 0.1903292 0.08512041 -0.0137214    This facilitates my favourite method of visualising Bayesian model inferences: overplotting dots and lines.\nE.g. how does the expected curve look?\nsamp %\u0026gt;% head(100 * 150) %\u0026gt;% rename(Exposure = exposure, Response = respHat) %\u0026gt;% ggplot(aes(x = Exposure, y = Response)) + geom_point(data = df) + geom_line(aes(group = mcmcid), alpha = 0.1, col = \u0026#39;purple\u0026#39;) + ylim(0, NA) Each of the 150 purple lines above is a candidate for the mean exposure-response curve (or dose-response curve, if you prefer), hence the column name respHat.\nThe subject-level predictions (i.e. the predictions with added noise) are also available in the samp object via the response column. For instance, if you wanted to infer on the distribution of responses for a single unit (patient, dog, country, whatever) with given exposure, this is the distribution you would be using:\nsamp %\u0026gt;% head(100 * 100) %\u0026gt;% rename(Exposure = exposure, Response = response) %\u0026gt;% ggplot(aes(x = Exposure, y = Response)) + geom_point(alpha = 0.1) + ylim(0, NA) In the plot above, responses are predicted at each of one hundred evenly-spaced exposures. At each exposure, there are 100 points shown - i.e. each vertical tower contains exactly 100 points. Thus, each dot represents a percentile.\nThat is a bloody nice plot, isn’t it? Time to sign off.\n  Next steps In a forthcoming post I will fit the Emax model to outcomes in the dataset of phase I outcomes of Brock et al. (2019) introduced in this post. Til then.\n References Bornkamp, Bjoern. 2019. DoseFinding: Planning and Analyzing Dose Finding Experiments. https://CRAN.R-project.org/package=DoseFinding.\n Brock, Kristian, Victoria Homer, Gurjinder Soul, Claire Potter, Cody Chiuzan, and Shing Lee. 2019. “Dose-Level Toxicity and Efficacy Outcomes from Dose-Finding Clinical Trials in Oncology.” https://doi.org/10.25500/edata.bham.00000337.\n Carpenter, Bob, Andrew Gelman, Matt Hoffman, Daniel Lee, Ben Goodrich, Michael Betancourt, Marcus A. Brubaker, Peter Li, and Allen Riddell. 2016. “Stan: A Probabilistic Programming Language.” Journal of Statistical Software 76 (Ii): 1–32.\n Macdougall, James. 2006. “Analysis of Dose–Response Studies—Emax Model.” In Dose Finding in Drug Development, edited by Naitee Ting, 127–45. New York, NY: Springer New York. https://doi.org/10.1007/0-387-33706-7_9.\n Yoshida, Kenta. 2019. Rstanemax: Emax Model Analysis with ’Stan’. https://CRAN.R-project.org/package=rstanemax.\n   ","date":1589328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592980010,"objectID":"6b2a6f9af5f3aae822efc3956ac621f2","permalink":"https://www.kristianbrock.com/post/emax-intro/","publishdate":"2020-05-13T00:00:00Z","relpermalink":"/post/emax-intro/","section":"post","summary":"Emax is an awesome, flexible non-linear model for estimating dose-response curves. Come learn how to fit it in R.","tags":["DoseFinding","R"],"title":"Fitting the Emax Model in R","type":"post"},{"authors":null,"categories":null,"content":"Do we expect the incidence of dose-limiting toxicity to increase as dose increases in dose-escalation clinical trials? Categorically, yes.\nDo we expect efficacy to be greater at higher doses? Implicitly yes - it is a reqirement of MTD-seeking methods like 3+3 and CRM.\nBut how well are each of these assumptions borne out by the data in real clinical trials? These questions motivated us to collect dose-level outcomes from recent dose-escalation clinical trials in cancer.\nThe dataset is introduced in this post. Analyses of the data will be conducted in future posts.\n","date":1588809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589004812,"objectID":"fe0249fa4b695fc14e076464a81ed7e7","permalink":"https://www.kristianbrock.com/project/dosefindingdata/","publishdate":"2020-05-07T00:00:00Z","relpermalink":"/project/dosefindingdata/","section":"project","summary":"We collected efficacy and toxicity outcomes from 122 published dose-finding trials. This project introduces the data and our insights.","tags":["DoseFinding"],"title":"Real data on lots of dose-finding trials","type":"project"},{"authors":["Kristian Brock"],"categories":["Research"],"content":" Introduction I recently had reason to estimate the average size of a dose-escalation trial. Based on my own experience, my immediate answer was “about 30 patients”. However, using the data of Brock et al. (2019) introduced in this recent post, there is no reason to guess. The dataset contains dose-level outcomes from 122 phase I clinical trial manuscripts reporting results of 139 dose-escalation experiments in cancer between 2008 and 2014.\nPerhaps surprisingly, we did not record the sample size of each trial. The focus of the research was not phase I trials per se, but the outcomes seen at individual doses in phase I trials. For that reason, we recorded the number of patients evaluable at each dose for several outcomes, including toxicity and efficacy outcomes. As this post explains, the outcome most commonly reported was incidence of dose-limiting toxicity (DLT), with about 95% of studies reporting dose-level DLT data. Thus, we can derive the number of patients in a dose-escalation study by summing the numbers of patients at each dose.\n Empirical sample size of phase I trials With those caveats out the way, let’s load the data:\nsource(\u0026#39;https://raw.githubusercontent.com/brockk/dosefindingdata/master/Load.R\u0026#39;) and some required packages:\nlibrary(dplyr) library(ggplot2) and then calculate the number of patients in each study:\ndlt_evaluable \u0026lt;- binary_events %\u0026gt;% filter(OutcomeId == 1) %\u0026gt;% # This is DLT group_by(Study) %\u0026gt;% summarise(NumPatients = sum(n), NumDoses = n())  We can simply visualise those summarised data:\ndlt_evaluable %\u0026gt;% ggplot(aes(x = NumPatients)) + stat_count(aes(y = ..prop..), alpha = 0.5) + geom_density(col = \u0026#39;blue\u0026#39;, size = 1.3) + xlim(0, NA) + labs(x = \u0026#39;Total sample size\u0026#39;, y = \u0026#39;Proportion\u0026#39;) to learn that the modal size is about \\(n=20\\). The distribution has a pronounced positive skew with a small number of relatively large sample sizes seen.\nCalculating summary statistics:\ndlt_evaluable %\u0026gt;% pull(NumPatients) %\u0026gt;% summary() ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 6.00 18.00 23.00 27.38 33.00 93.00 we see that the median size is 23 patients with an inter-quartile range of (18, 33). My initial guess of about 30 was a bit toppy.\nBy drug type The database also records various descriptive variables about the clinical scenarios. We can, for example, investigate sample size by the type of drug that is having its dose varied.\nLet’s do that. First, let us check which treatment types are contained:\ndlt_evaluable %\u0026gt;% left_join(studies, by = \u0026#39;Study\u0026#39;) %\u0026gt;% count(DoseVaryingTreatmentType) %\u0026gt;% arrange(-n) %\u0026gt;% head(5) %\u0026gt;% knitr::kable(digits = 1)   DoseVaryingTreatmentType n    Chemotherapy 49  Inhibitor 48  Monoclonal Antibody 8  Chemotherapy + inhibitor 6  Immunomodulatory drug 4    We see that this period yielded trials mostly of chemotherapy and inhibitor drugs. It really only makes sense to summarise sample sizes for those two categories:\ndlt_evaluable %\u0026gt;% left_join(studies, by = \u0026#39;Study\u0026#39;) %\u0026gt;% filter(DoseVaryingTreatmentType %in% c(\u0026#39;Chemotherapy\u0026#39;, \u0026#39;Inhibitor\u0026#39;)) %\u0026gt;% ggplot(aes(x = NumPatients)) + stat_count(aes(y = ..prop..), alpha = 0.5) + geom_density(col = \u0026#39;blue\u0026#39;, size = 1.3) + xlim(0, NA) + facet_wrap(~ DoseVaryingTreatmentType, ncol = 1) + labs(x = \u0026#39;Total sample size\u0026#39;, y = \u0026#39;Proportion\u0026#39;) The distributions look fairly exchangeable, suggesting that phase I trials of inhibitors have tended to use similar sizes to those of chemotherapies.\n Haematological vs non-haematological We can instead contrast the sample sizes of trials in haematological and solid tumour (or non-haematological) diseases:\ndlt_evaluable %\u0026gt;% left_join(studies, by = \u0026#39;Study\u0026#39;) %\u0026gt;% filter(HaemNonhaem %in% c(\u0026#39;Haematological\u0026#39;, \u0026#39;NonHaematological\u0026#39;)) %\u0026gt;% ggplot(aes(x = NumPatients)) + stat_count(aes(y = ..prop..), alpha = 0.5) + geom_density(col = \u0026#39;blue\u0026#39;, size = 1.3) + xlim(0, NA) + facet_wrap(~ HaemNonhaem, ncol = 1) + labs(x = \u0026#39;Total sample size\u0026#39;, y = \u0026#39;Proportion\u0026#39;) Again, we see that the distributions are largely coincident.\n Sample-size per dose investigated We can plot sample size against the number of dose investigated to learn roughly how many patients are evaluated at each dose:\ndlt_evaluable %\u0026gt;% ggplot(aes(x = NumDoses, y = NumPatients)) + geom_point() + geom_smooth(method = \u0026#39;loess\u0026#39;) + xlim(0, NA) ## `geom_smooth()` using formula \u0026#39;y ~ x\u0026#39; In one particular study, each patient received a different dose. That is the outlier on the right of the plot above. If we exclude that point, we get a better look at the relationship:\ndlt_evaluable %\u0026gt;% filter(NumDoses \u0026lt; 20) %\u0026gt;% ggplot(aes(x = NumDoses, y = NumPatients)) + geom_point() + geom_smooth(method = \u0026#39;loess\u0026#39;) + xlim(0, NA) ## `geom_smooth()` using formula \u0026#39;y ~ x\u0026#39; For numbers of doses less than about 10, the aggregate sample size is broadly linear in the number of doses. How many patients per dose?\ndlt_evaluable %\u0026gt;% filter(NumDoses \u0026lt; 20) %\u0026gt;% lm(NumPatients ~ NumDoses, data = .) %\u0026gt;% broom::tidy() %\u0026gt;% knitr::kable()   term estimate std.error statistic p.value    (Intercept) 9.020828 2.6361675 3.421948 0.0008352  NumDoses 3.831117 0.5030493 7.615787 0.0000000    About 4, with (3, 5) being a good working uncertainty interval. That is not to say that phase I trials should be that size, of course! Merely a reflection of what was done, on average, between 2008 and 2014.\n References Brock, Kristian, Victoria Homer, Gurjinder Soul, Claire Potter, Cody Chiuzan, and Shing Lee. 2019. “Dose-Level Toxicity and Efficacy Outcomes from Dose-Finding Clinical Trials in Oncology.” https://doi.org/10.25500/edata.bham.00000337. https://doi.org/10.25500/edata.bham.00000337.\n    ","date":1588809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592980010,"objectID":"186a4601775e6042af841cd5dd3562f8","permalink":"https://www.kristianbrock.com/post/dose-finding-trial-sizes/","publishdate":"2020-05-07T00:00:00Z","relpermalink":"/post/dose-finding-trial-sizes/","section":"post","summary":"Empirically, what sample size is used in dose-escalation trials?","tags":["DoseFinding"],"title":"Sample sizes in phase I","type":"post"},{"authors":["Kristian Brock"],"categories":["Research"],"content":" Introduction Do we expect the incidence of dose-limiting toxicity to increase as dose increases in dose-escalation clinical trials? Categorically, yes. The toxicologists’ epithet sola dosis facit venenum or the dose makes the poison says that any substance can be dangerous if administered in great enough quantities.\nWhat about efficacy? Do we expect efficacy to be greater at higher doses? Implicitly we must do whenever we use a method that seeks the maximum tolerable dose (MTD). The two adjectives in that phrase are fundamental to understanding the most common approach in dose-escalation:\n we seek the maximum dose, i.e. we expressly favour higher doses; so long as the dose is tolerable, i.e. it is associated with an acceptable toxicity probability.  MTD-seeking methods are pervasive in the dose-finding literature. Rule-based methods like the 3+3 seek the MTD. Rogatko et al. (2007) and Chiuzan et al. (2017) showed that the 3+3 method was predominant in dose-finding trials between 1991 and 2014. Many model-based methods like the continual reassessment method (CRM, O’Quigley, Pepe, and Fisher (1990)) and escalation with overdose control (EWOC, Tighiouart and Rogatko (2010)) also seek the MTD.\nThese methods decide dose by considering only toxicity outcomes. The absence of efficacy from the decision reveals that there must be an assumption. Specifically, MTD-seeking methods assume efficacy increases monotonically in dose. Under this assuption, the MTD offers the best chance of efficacy for an acceptable risk of toxicity.\nBut this is all just theory. Science is a sceptical pursuit, and none are more sceptical than clinical trial statisticians. The shift in cancer away from cytotoxic drugs (like chemotherapy) to cytostatic drugs (like targeted therapies) over the last two decades has provided more reason to be sceptical.\nSo what evidence is there in recent clinical trials that the probability of toxicity increases in dose? And more importantly, what evidence is there that the probability of efficacy increases in dose?\nSeeking to answer these questions motivated some researchers and I to gather data from many dose-finding clinical trials in cancer run between 2008 and 2014.\n Methods Chiuzan et al. (2017) conducted a systematic review of the methods used in cancer dose-finding trials. Their findings mirrored those of Rogatko et al. (2007) from the previous decade that the overwhelming majority of dose-finding trials (over 90%) use a rule-based design. The assumption that efficacy increases in dose is evidently pervasive, irrespective the shift in research to targeted therapies. I worked with Victoria Homer, Gurjinder Soul and Claire Potter of the University of Birmingham to extract dose-level outcomes from a large number of dose-finding trial publications to investigate the suitability of this assumption.\nIn their review, Chiuzan et al. found 1,712 manuscripts published between 2008 and 2014. With the best will in the world, we would never be able to extract data from this many manuscripts. Chiuzan et al. published in their paper a large table summarising the trials that used model-based methods, like CRM or EWOC, of which there were 92 examples. This number was feasible for data extraction. However, the subset of trials that use model-based methods may not be representative of the entire sample. With the cooperation of Shing Lee and Cody Chiuzan of Columbia University, we supplemented the list of 92 model-based papers with 30 randomly-selected manuscripts that used rule-based methods, to create a list of 122 manuscripts.\nData items Each of the 122 manuscripts presented the results of at least one dose-finding experiment in humans. Some papers reported the results of more than one experiment.\nFrom each, we extracted:\n characteristic data, including:  type of cancer; name and type of experimental therapy; name and type of concommitant therapies;  outcome data at each dose, including:  dose level; number of patients evaluated; number of toxicity events recorded; number of efficacy events recorded.   Dose-level outcomes vs pooled outcomes We expressly sought outcomes broken down by dose-level to investigate the suitability of the assumptions of monotonically increasing toxicity and efficacy. We did not collect outcomes that were reported by pooling all dose-levels because this would not help answer our research questions.\n Toxicity outcomes Dose-limiting toxicity (DLT) is the de-facto standard safety outcome in dose-finding trials. Manifestation of DLT involves the occurence of pre-specified adverse events (AEs) that are serious enough that they would motivate the clinician to not consider higher doses in the affected patient. The precise definition of DLT varies from trial to trial but should always be detailed in the trial protocol. The definition of DLT in a trial may reflect the clinical characteristics of the disease and the antipated adverse events from the entire treatment ensemble (i.e. arising from the experimental drug and concommitant drugs). Data on DLT was sought in every manuscript.\nWhere reported, we also collected other outcomes that reflected general drug safety, like occurrence of grade 3-4 AE or occurence of serious adverse event.\n Efficacy outcomes The scientific question motivating this research concerns drug efficacy and how this changes as dose is increased. Efficacy is only loosely defined in cancer. There is no single outcome that is unambiguously accepted as the variable best reflecting efficacy.\nApplications for drug licencing are generally supported by phase III trials that use survival-type outcomes like overall survival (OS) and progression-free survival (PFS). In contrast, early phase trials, when they evaluate efficacy, tend to use surrogate outcomes that can be evaluated over the short-term like disease response.\nAssessing disease response generally involves comparing the extent of disease (e.g. tumour size or number of leukaemic cells) at baseline and after treatment administration to characterise the patient’s response to treatment using one of several categories.\nThe most common response outcome categorisation used in cancer trials is RECIST response (Eisenhauer et al. 2009). This scheme involves measuring the diameters of target solid tumour lesions and categorising the response as one of:\n complete response (CR), when all target lesions disappear completely; partial response (PR), when lesions shrink in aggregate by a threshold amount, but remain measureable; progressive disease (PD), when lesions grow in aggregate by a threshold amount; stable disease (SD), when neither CR, PR nor PD occurs.  These are the RECIST criteria for assessing solid tumours. Researchers have defined anlogues to these schemes in other cancers, including blood cancers where diseased cells reside in the blood rather than a discrete measurable tumour. An example of this is the Cheson criteria in acute myeloid leukaemia (AML).\nWhere reported, we recorded the incidence of these response categories by dose-level.\nFurthermore, researchers commonly derive additional outcomes:\n objective response (OR), when CR or PR is observed; disease containment (DC), when CR, PR or SD occurs.  We recorded these outcomes where reported, and imputed them where the components were available. This involved adjustments to the definition of OR and DC to suit the response scheme. For example, an objective response in AML included complete response with incomplete marrow recovery, a response category signifiying relative treatment success that does not exist in RECIST.\n Orderability of doses Analysing how the probabilities of events change as dose increases requires that we are working with increasing doses. The general 3+3, CRM and EWOC methods require that the doses under investigation are fully orderable. That is, we need to be able to unambiguously say that \\(d_i \u0026lt; d_j\\) or \\(d_i \u0026gt; d_j\\) for each \\(d_i, d_j \\in \\mathcal{D} = \\{ d_1, ..., d_n \\}\\) for \\(i \\neq j\\).\nDespite this, we commonly encountered trials that used sets of doses that were not fully orderable. When this happened, for the purposes of analysis, we broke the doses up to form fully orderable subsets that we called analysis series.\nThere are many possible subsets of a set so the way we formed these series was unavoidably subjective. We sought to maximise the size of the largest fully orderable series. Furthermore, we avoided allocating a dose to several series unless repetition was the only way to avoid having an orphan dose (i.e. a series of size 1).\nIn summary, the data have been recorded in a way amenable to answering the research questions.\n  Data extraction Data were extracted from papers and recorded on a prior-written standardised form, with one form for each manuscript. The data were then recorded on sheets in an Excel file that was deposited in the University of Birmingham’s data repository. Details on accessing the data are given below.\n  Results Data presence We can load the datasets by running:\nsource(\u0026#39;https://raw.githubusercontent.com/brockk/dosefindingdata/master/Load.R\u0026#39;) The script above hosted on GitHub:\n loads the readxl, httr, dplyr, and stringr packages; downloads the raw data file from the data repository; joins the raw datasets to create datasets useful for analysis.  We can check the number of manuscripts:\nlibrary(dplyr) manuscripts %\u0026gt;% nrow ## [1] 122 and the number of studies:\nstudies %\u0026gt;% nrow ## [1] 139 There are more studies than manuscripts because some manuscripts report results from more than one dose-finding experiment.\nCharacteristic data was available for every manuscript. The clear majority of studies report toxicity outcomes by dose:\nstudies %\u0026gt;% count(ToxByDose) ## # A tibble: 2 x 2 ## ToxByDose n ## \u0026lt;lgl\u0026gt; \u0026lt;int\u0026gt; ## 1 FALSE 6 ## 2 TRUE 133 Substantially fewer report efficacy outcomes by dose:\nstudies %\u0026gt;% count(EffByDose) ## # A tibble: 2 x 2 ## EffByDose n ## \u0026lt;lgl\u0026gt; \u0026lt;int\u0026gt; ## 1 FALSE 54 ## 2 TRUE 85 The five outcomes reported most commonly are:\nbinary_events %\u0026gt;% left_join(studies, by = \u0026#39;Study\u0026#39;) %\u0026gt;% left_join(outcomes, by = \u0026#39;OutcomeId\u0026#39;) %\u0026gt;% group_by(OutcomeClass, Outcome = OutcomeText) %\u0026gt;% summarise( NumObs = n(), NumStudies = length(unique(Study)) ) %\u0026gt;% mutate(ObsPerStudy = NumObs / NumStudies) %\u0026gt;% arrange(-NumObs) %\u0026gt;% head(5) %\u0026gt;% knitr::kable(digits = 1)   OutcomeClass Outcome NumObs NumStudies ObsPerStudy    Safety Patients with DLT 648 131 4.9  Efficacy Patients with Objective Response by RECIST 273 54 5.1  Efficacy Patients with Disease Control by RECIST 223 44 5.1  Efficacy Patients with Best response SD by RECIST 222 44 5.0  Efficacy Patients with Best response PD by RECIST 170 36 4.7    We see that DLT is reported in the great majority of studies. The most commonly-reported efficacy outcome is objective response by RECIST. As described above, this outcome is only relevant in solid tumour settings.\nIt was frustratingly common that toxicity would be reported by dose-level but efficacy would only be reported for all doses combined. Naturally this impinges our ability to answer the research question.\nWe found no papers reporting OS or PFS by dose-level.\n  Discussion This post introduced a substantial dataset on outcomes from dose-finding clinical trials. It showed how to load the dataset and derive a few simple summary statistics on the number of studies and the frequency with which outcomes were reported. Actually doing something useful with the data will be the subject of further posts. For now, this post continues below with a full description of the data files.\n Availability of data The datasets are available to download from https://edata.bham.ac.uk/337/. A full specification of the file format is give below.\nIf you use the data, please cite:\n Kristian Brock, Victoria Homer, Gurjinder Soul, Claire Potter, Cody Chiuzan and Shing Lee “Dose-level toxicity and efficacy outcomes from dose-finding clinical trials in oncology”. 2019. doi: 10.25500/edata.bham.00000337\n or use the following BibTex entry:\n@misc{BrockDoseFindingData, author = {Kristian Brock and Victoria Homer and Gurjinder Soul and Claire Potter and Cody Chiuzan and Shing Lee}, year = {2019}, title = {Dose-level toxicity and efficacy outcomes from dose-finding clinical trials in oncology}, doi = {10.25500/edata.bham.00000337}, howpublished= {\\url{https://doi.org/10.25500/edata.bham.00000337}}, timestamp = {2019.05.05} } Fast loading into R As demonstrated above, the fastest way to get the data loaded into R is to run the command:\nsource(\u0026#39;https://raw.githubusercontent.com/brockk/dosefindingdata/master/Load.R\u0026#39;) However, that runs code I have written on your machine so it requires that you trust me not to turn your computer into a bitcoin-mining drone in my distributed e-wealth empire.\n  Full description of database format The file is called database.xlsx and it contains many tabs. The following sections describe in depth the format of the file.\nManuscripts This tab details the manuscripts studied in this research.\nColumns:\n Manuscript, string: Primary key for the manuscript in this project. Year, int: Year manuscript was published. DOI, string: Manuscript DOI. Source, string: How the manuscript came to be in the database. Options are:  ChiuzanModelBased, listed in Chiuzan et al. (2017) as a trial using a model-based dose-finding design. ChiuzanRuleBased1, randomly selected from the unpublished list of trials using rule-based dose-finding designs assembled by Chiuzan et al. (2017) during their review.  SupplementAppendix, bool: TRUE if manuscript has a supplement or appendix. DataExtraction1, string: Person who extracted the data. DataExtraction2, string: Person who extracted the data a second time or checked the first extraction. AddToDB, bool: TRUE if data has been added to the database. Note, string: Items noted during data extraction.   Studies In this database, a Study is an abstract concept encapsulating:\n a set of doses of some treatment or combination of treatments; given to patients; yielding outcome data.  In a simple scenario, one manuscript would contain one Study. However, there can be multiple Studies in a manuscript. For example, if more than treatment or treatment combination is the subject of dose investigation in a single manuscript, they are seperate studies.\nColumns:\n Manuscript, string: Foreign key to Manuscripts, reflecting the manuscript that reported the data. Study, string: Primary key for the study in this project. PatientGroup, string: brief description of the patient group. PatientGroupDetailed, string: more detailed description of the patient group. HaemNonhaem, string: Options are:  Haematological, if the disease under study was haematological, like leukaemia or lymphoma. NonHaematological, if the disease under study was solid tumour and therefore non-haematological, like lung cancer. Mixed, if both disease types were studied. Unknown, where not specified.  Treatment, string: brief description of all treatments given, whether dose-varying or not. ContainsChemo, bit: 1 if the treatment contains any chemotherapy element, fixed-dose or dose-varying. A full decomposition of treatment types is not provided here (e.g. there is no ContainsInhibitor field) but standardised types of the dose-varying treatment(s) are given in the column DoseVaryingTreatmentType. FixedDoseChemo, bit: 1 if the treatment contains a fixed-dose chemotherapy component; 0 if there is no fixed-dose chemo element. Note if chemotherapy is included only as part of the investigative treatment and thus has its dose varied, this field will be 0. This field is provided to address the reasonable expectation that the presence of a standard chemotherapy backbone increases the expectation of toxicity. A special case is made here for chemo to allow an analysis to reflect the reasonably-expected population-level effect that chemotherapy is associated with greater toxicity (and perhaps also response). DoseVaryingTreatment, string: the treatment(s) that have their dose varied. In the case of many treatments, items are separated by the + symbol. Any treatment identified in Treatment but not in DoseVaryingTreatment can be assumed to be constant across the doses under investigation. DoseVaryingTreatmentType, string: type of the treatment(s) undergoing dose variation. Options are:  Cell therapy Chemoprevention Chemotherapy Cytokine GeneTherapy Immunomodulatory drug Inhibitor Monoclonal Antibody Not disclosed Oncolytic virus Radiopharmaceutical Radiotherapy or combinations thereof.  DoseVaryingTreatmentTypeDetail, string: more detailed and precise description of the type of dose-varying treatment, provided where available. MultiVarying, bool: TRUE if the dose of several treatments was varied. MonotonicDoses, bool: TRUE if the doses investigated are monotonically increasing. DoseUnits, string: the units of the doses. MTDorRP2D, string: the dose recommended as the MTD or RP2D. ToxByDose, bool: TRUE if toxicity outcomes were reported by dose. EffByDose, bool: TRUE if efficacy outcomes were reported by dose. AdverseEventLevelCounts, bool: TRUE if adverse events were tabulated by dose for specific events (e.g. Anaemia) in contrast to the broad level (e.g. Grade 3/4 AE).   Outcomes This tab details the outcome measures collected from the manuscripts.\nColumns:\n OutcomeId, int: Primary key for the outcome measure in this project. OutcomeText, string: Description of the outcome measure. OutcomeClass, string: Class of the outcome measure. Options are:  Safety Efficacy  Include, bool: This may be deprecated. HighIsGood, bool: TRUE if a high value is a good thing for patients. FALSE otherwise. E.g. high response rate is good and low toxicity rate is good. PerPatientOutcome, bool: TRUE if the outcome measure is binary at the patient level, e.g. “Any AE” is binary at the patient-level because a patient either experiences any AE (in which case it is TRUE) or they do not (in which case it is FALSE). In contrast, “Total AEs” is not binary because a patient may experience many AEs. Note, string: Items noted during data extraction.   BinaryOutcomeEvents This tab contains the data extracted from manuscripts on binary outcome measures.\nColumns:\n Study, string: Foreign key to Studies tab. Dose, string: Description of dose as reported. In the main, this is just a number, and simple to interpret. In more complicated scenarios, it could contain information reflecting: the frequency that treatments were given; several doses reported together like “10mg - 25mg” (an irritating practice - please do not do this); or doses for several treatments. The bewildering variety in this field is what encouraged us to think about dose-levels (rather than actual doses) in monontonically increasing series. OutcomeId, int: Foreign key to Outcomes tab. n, int: Number of patients. The denominator in a binary event rate. Events, int: number of events. Orphaned, bool: TRUE if the dose-level is orphaned and therefore has no unambiguous comparator.   BinaryOutcomeAnalyisSeries Doses investigated and reported in clinial trials are not always monotonically increasing, despite the fact that they should be under the most commonly-used experimental designs like 3+3 and CRM. Blithely analysing all of the doses as they are reported in publications would sometimes create scenarios where it is impossible to definitively say whether a dose is greater or less than some other (e.g. “5mg per day” vs “10mg every second day”; or “10mg of A + 5mg of B” vs “5mg of A + 10mg of B”).\nAn analysis-series is a set of doses from a particular study that are strictly monotonically increasing, evaluated with respect to a particular outcome measure. There are many ways to create such subsets. The analysis series presented here are merely those preferred by the author. They favour series with as many doses as possible (whilst still retaining unambiguous monotonic order) and as little repetition as possible. A small amount of repetition has been tolerated where necessary to avoid an “orphaned” dose-level, i.e. a dose-level with no comparator.\nYou are free to create our own analysis-series if you prefer.\nColumns:\n NewSeries, bit: This field exists to automate the generation of AnalysisSeriesId and Order. AnalysisSeriesId, int: Primary key for the analysis series. Automatically generated by simple logic in Excel. Order, int: The order of the dose in this analysis-series. Automatically generated by simple logic in Excel. Study, string: Foreign key to Studies tab. Dose, string: Description of dose as reported. In the main, this is just a number, and simple to interpret. In more complicated scenarios, it could contain information reflecting: the frequency that treatments were given; several doses reported together like “10mg - 25mg” (an irritating practice - please do not do this); or doses for several treatments. The bewildering variety in this field is what encouraged us to think about dose-levels (rather than actual doses) in monontonically increasing series. OutcomeId, int: Foreign key to Outcomes tab.    References Chiuzan, Cody, Jonathan Shtaynberger, Gulam A. Manji, Jimmy K. Duong, Gary K. Schwartz, Anastasia Ivanova, and Shing M. Lee. 2017. “Dose-Finding Designs for Trials of Molecularly Targeted Agents and Immunotherapies.” Journal of Biopharmaceutical Statistics 27 (3): 477–94. https://doi.org/10.1080/10543406.2017.1289952.\n Eisenhauer, E. A., P. Therasse, J. Bogaerts, L. H. Schwartz, D. Sargent, R. Ford, J. Dancey, et al. 2009. “New Response Evaluation Criteria in Solid Tumours: Revised RECIST Guideline (Version 1.1).” European Journal of Cancer 45 (2): 228–47. https://doi.org/10.1016/j.ejca.2008.10.026.\n O’Quigley, J, M Pepe, and L Fisher. 1990. “Continual Reassessment Method: A Practical Design for Phase 1 Clinical Trials in Cancer.” Biometrics 46 (1): 33–48. https://doi.org/10.2307/2531628.\n Rogatko, André, David Schoeneck, William Jonas, Mourad Tighiouart, Fadlo R. Khuri, and Alan Porter. 2007. “Translation of Innovative Designs into Phase I Trials.” Journal of Clinical Oncology 25 (31): 4982–6. https://doi.org/10.1200/JCO.2007.12.1012.\n Tighiouart, Mourad, and André Rogatko. 2010. “Dose Finding with Escalation with Overdose Control (EWOC) in Cancer Clinical Trials.” Statistical Science 25 (2): 217–26. https://doi.org/10.1214/10-STS333.\n   ","date":1588723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592980010,"objectID":"0129594d61c988b2ae4ee03d7338e101","permalink":"https://www.kristianbrock.com/post/dose-finding-data/","publishdate":"2020-05-06T00:00:00Z","relpermalink":"/post/dose-finding-data/","section":"post","summary":"Descriptive data and dose-level outcomes from 122 manuscripts reporting results of dose-finding clinical trials in cancer.","tags":["DoseFinding"],"title":"Dataset containing outcomes from dose-finding trials in cancer","type":"post"},{"authors":["Kristian Brock"],"categories":["Research"],"content":"    Introduction If operating performance of a dose-finding clinical trial design is sought, it is practically guaranteed that this will be by computer simulation. In a dose-finding simulation, a dose is initially selected and toxicity (and perhaps also efficacy) outcomes are sampled according to some assumed true event probabilities to generate data for some imaginary patients. The model is fit to the data and the subsequent dose recommendation is given to the next group of imaginary patients. This iterative and adaptive process continues to conduct a virtual trial. In this manner, many virtual trials are run to inform the trialists of the operating performance of the design.\nHowever, simulating random virtual trials is not the only way to measure operating performance. Richard McElreath said:\n If there’s a random way to do something, there’s usually a less random way that is both better and requires more thought.\n In dose-finding trials, a less random method is to calculate each trial path using brute force.\n Simple example I demonstrated dose paths (Yap et al. 2017; Brock et al. 2017) in a recent post using the escalation package. Let us walk through a simple example to see how dose-paths and simulation can be used to calculate operating characteristics for a dose-finding trial design.\nWe load the escalation package:\nlibrary(escalation) ## Loading required package: magrittr For the sake of illustration, let us use:\n a continual reassessment method (CRM) design in a three-dose setting to target a toxicity rate of 25% with a dose-toxicity skeleton that anticipates the middle dose is the sought dose:  target \u0026lt;- 0.25 skeleton \u0026lt;- dfcrm::getprior(0.1, target = target, nu = 2, nlevel = 3) model \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_at_n(n = 6) We told the model above to stop when the total sample size reached six patients. Obviously, real trials would generally use larger sample sizes, but six patients will be enough for our illustrative example.\nLet us start the trial at the second dose and calculate all possible dose paths for two cohorts of three patients:\npaths \u0026lt;- model %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 2), next_dose = 2) Viewing the paths makes clear that the decision space is finite and tractable to exact calculation of probabilities:\ngraph_paths(paths)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"2\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#35B779FF\\\"] \\n \\\"2\\\" [label = \\\"3\\\", fontcolor = \\\"#31688EFF\\\", fillcolor = \\\"#FDE725FF\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#31688EFF\\\", fillcolor = \\\"#FDE725FF\\\"] \\n \\\"4\\\" [label = \\\"2\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#35B779FF\\\"] \\n \\\"5\\\" [label = \\\"2\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#35B779FF\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"8\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"10\\\" [label = \\\"3\\\", fontcolor = \\\"#31688EFF\\\", fillcolor = \\\"#FDE725FF\\\"] \\n \\\"11\\\" [label = \\\"2\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#35B779FF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"14\\\" [label = \\\"2\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#35B779FF\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"16\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"17\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"20\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#31688EFF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"12\\\" [label = \\\"NNT\\\"] \\n\\\"8\\\"-\\\"13\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"15\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"16\\\" [label = \\\"NTT\\\"] \\n\\\"8\\\"-\\\"17\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"18\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"19\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"20\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"21\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} Our first instinct might tell us that there are lots of terminal nodes that recommend dose 1 and relatively few that recommend dose 3. We might then infer that selecting dose 1 is likely. In fact, if the true toxicity probabilities at the three doses are (10%, 17%, 25%), we can calculate the exact operating performance:\nprobs \u0026lt;- c(0.10, 0.17, 0.25) cdp \u0026lt;- paths %\u0026gt;% calculate_probabilities(true_prob_tox = probs) prob_recommend(cdp) ## NoDose 1 2 3 ## 0.0000000 0.1128170 0.4047377 0.4824453 to learn that there is a 40.5% chance that the second dose will be recommended, and a 48.2% chance that the third dose will be recommended.\nThe object name cdp stands for crystallised dose paths, my name for paths that have associated exact probabilities. Simply printing the object to the console:\ncdp ## Number of nodes: 21 ## Number of terminal nodes: 16 ## ## Number of doses: 3 ## ## True probability of toxicity: ## 1 2 3 ## 0.10 0.17 0.25 ## ## Probability of recommendation: ## NoDose 1 2 3 ## 0.000 0.113 0.405 0.482 ## ## Probability of continuance: ## [1] 0 ## ## Probability of administration: ## 1 2 3 ## 0.0384 0.6757 0.2859 ## ## Expected sample size: ## [1] 6 ## ## Expected total toxicities: ## [1] 1.141085 confirms the recommendation probabilities and many other statistics.\nThe more common way to estimate dose-finding design performance is via simulation. escalation supports simulation too:\nsims100 \u0026lt;- model %\u0026gt;% simulate_trials(num_sims = 100, true_prob_tox = probs, next_dose = 2) sims1000 \u0026lt;- model %\u0026gt;% simulate_trials(num_sims = 1000, true_prob_tox = probs, next_dose = 2) These, too, will estimate the probability that each dose will be recommended when the trial is done:\nprob_recommend(sims100) ## NoDose 1 2 3 ## 0.00 0.15 0.40 0.45 prob_recommend(sims1000) ## NoDose 1 2 3 ## 0.000 0.112 0.420 0.468 However, the inferences from the simulations are subject to Monte Carlo error because we have used a finite number of samples to estimate an unknown probability. If we collate the inferences from the dose-paths and simulations:\nlibrary(tibble) library(dplyr) trial_inference \u0026lt;- function(x, n) { dose_labs \u0026lt;- c(\u0026#39;NoDose\u0026#39;, dose_indices(x)) tibble(Dose = dose_labs, ProbRecommend = prob_recommend(x), N = n) %\u0026gt;% mutate( ProbRecommendSE = sqrt(ProbRecommend * (1 - ProbRecommend) / N), ProbRecommendL = ProbRecommend - 2 * ProbRecommendSE, ProbRecommendU = ProbRecommend + 2 * ProbRecommendSE ) } inference \u0026lt;- bind_rows( trial_inference(cdp, n = Inf) %\u0026gt;% mutate(Method = \u0026#39;Exact\u0026#39;), trial_inference(sims100, n = 100) %\u0026gt;% mutate(Method = \u0026#39;Sims (N=100)\u0026#39;), trial_inference(sims1000, n = 1000) %\u0026gt;% mutate(Method = \u0026#39;Sims (N=1000)\u0026#39;), )  we see the extent and effect of that estimation error:\nlibrary(ggplot2) inference %\u0026gt;% ggplot(aes(x = Dose, y = ProbRecommend, col = Method)) + geom_point(position = position_dodge(width = 0.3)) + geom_errorbar(aes(ymin = ProbRecommendL, ymax = ProbRecommendU), width = 0.1, position = position_dodge(width = 0.3)) As we might anticipate, the simulation method is hopelessly imprecise with \\(N=100\\) iterations. In contrast the simulations with \\(N=1000\\) iterations are fairly precise.\nEach simulated trial required that the dose selection model be fit twice, once at the end of each of the two cohorts. A simulation study with 1000 iterations thus required 2000 model fits. We might justifiably conclude that fairly precise is a comparatively bad return on 2000 model invocations when the exact inferences from the dose paths required precisely 21 model fits, one for each of the nodes in the graph above.\nDose paths are more precise than simulations because they are free from the Monte Carlo error that clouds inferences from simulations. In this toy scenario, the paths method was also vastly more efficient, requiring only a small fraction of the model fits.\nHowever, this contrived example is unlikely to be representative of real trial scenarios, where we would expect much higher sample sizes. This invites the question, how far can the dose paths method be taken? When does it become more efficient to run simulations than attempting a brute force calculation?\n Calculating paths at scale Contrasting the computational efficiency of dose paths and simulations requires calculating the number of model invocations expected by each.\nFor simulations, the arithmetic is simple. Investigating a dose-finding trial of \\(M\\) cohorts in a single scenario using a simulation study with \\(N\\) replicates requires \\(MN\\) model invocations. For example, a trial of \\(n=30\\) patients evaluated in 10 cohorts requires 10 model invocations, so 1000 simulated replicates requires \\(10 \\times 1000 = 10000\\) model fits in total.\nIn a dose paths analysis, the model must be fit once for each node in the graph. The number of nodes in a dose paths analysis is slightly more complex to calculate (but only slightly). Let \\(k\\) be the number of distinct outcomes a single patient may experience. In a phase I trial using the CRM, each patient may experience toxicity (T) or no toxicity (N), so \\(k= 2\\). The number of outcome combinations in a cohort of \\(m\\) patients is\n\\[ \\frac{(m + k - 1)!}{m! (k - 1)!} \\].\nFor instance, a cohort of three patients has four possible outcomes: NNN, NNT, NTT, or TTT. The formula above gives \\((3 + 2 - 1)! / 3! (2 - 1)! = 4\\).\nThat is the number of outcomes of a single cohort. The number of nodes at depth \\(i\\) in a graph of dose paths is equal to the number of nodes at depth \\(i-1\\) multiplied by the number of cohort outcomes at depth \\(i\\). There is always one node at depth 1 at the centre of the graph. For a cohort of three in a CRM trial, we saw above that there are four possible outcomes. Thus, at depth 2, there are 4 nodes and at depth 2 there are 16 nodes, etc.\nNaturally, the cohort sizes may be irregular. In general, the number of nodes at depth \\(I\\) for cohort sizes \\((m_1, ..., m_I)\\) is\n\\[ \\prod_{i=1}^I \\frac{(m_i + k - 1)!}{m_i! (k - 1)!} \\].\nFortunately, there is a function in escalation that calculates the number of nodes in a dose paths analysis. Our simple example with \\(n=6\\) patients conducted in two cohorts of three has:\nnum_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = c(3, 3)) ## [1] 1 4 16 nodes at depths, 1, 2, and 3, respectively. The total number of model invocations is the total number of nodes, which is 21, as required.\nWe can use the function to calculate the number of nodes in an \\(n=30\\) trial with 10 cohorts of three patients:\nn \u0026lt;- num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 10)) n ## [1] 1 4 16 64 256 1024 4096 16384 65536 ## [10] 262144 1048576 The number of nodes increases exponentially in graph depth. The total number of model fits is:\nsum(n) ## [1] 1398101 1.4m model fits is a substantial computational burden.\nClearly dose number of nodes has increased dramatically as the number of cohorts has increased. Let’s calculate the number of nodes contained in dose-paths of \\(M\\) cohorts of 3, for increasing values of M:\ncohort_size \u0026lt;- 3 num_cohorts \u0026lt;- c(2, 3, 4, 5, 6, 7, 8, 9, 10) %\u0026gt;% as.integer() library(purrr) num_model_fits \u0026lt;- map_int( num_cohorts, ~ num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(cohort_size, .x)) %\u0026gt;% sum() ) num_model_fits ## [1] 21 85 341 1365 5461 21845 87381 349525 1398101 THese numbers are the total number of nodes. The final value confirms that roughly 1.4m nodes feature in a graph of paths for eight cohorts of 3 patients. Let’s view those numbers of model invocations alongside the equivalent for simulations with \\(N=1000\\) and \\(10000\\) replicates:\nbind_rows( tibble(NumCohorts = num_cohorts, NumModelFits = num_model_fits, Method = \u0026#39;Paths\u0026#39;), tibble(NumCohorts = num_cohorts, NumModelFits = 1000 * num_cohorts, Method = \u0026#39;Sims (N=1000)\u0026#39;), tibble(NumCohorts = num_cohorts, NumModelFits = 10000 * num_cohorts, Method = \u0026#39;Sims (N=10000)\u0026#39;), ) %\u0026gt;% ggplot(aes(x = NumCohorts, y = NumModelFits, col = Method)) + geom_point() + geom_line() + scale_y_log10() + labs(y = \u0026#39;Number of model fits\u0026#39;, x = \u0026#39;Number of cohorts of 3 patients\u0026#39;, title = \u0026#39;Computational burden of dose paths and simulation\u0026#39;) The \\(y\\)-axis on the plot above is on the log-scale. We see that the number of model fits in the dose paths analysis increases exponentially in the number of cohorts, as expected. In contrast, the number of model fits required by simulations increases linearly in the number of cohorts, generally from a much higher base. The result is that the paths analysis is more computationally efficient than simulations:\n with \\(N=1000\\) iterations when there are fewer than 6 cohorts of 3; with \\(N=10000\\) iterations when there are fewer than 8 cohorts of 3.  Perhaps we do not plan to use cohorts, intending instead to update the dose recommendation after each patient. We can calculate the computational burdens in this situation:\ncohort_size \u0026lt;- 1 num_cohorts \u0026lt;- seq(from = 1, to = 30, by = 1) num_model_fits \u0026lt;- map_int( num_cohorts, ~ num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(cohort_size, .x)) %\u0026gt;% sum() ) bind_rows( tibble(NumCohorts = num_cohorts, NumModelFits = num_model_fits, Method = \u0026#39;Paths\u0026#39;), tibble(NumCohorts = num_cohorts, NumModelFits = 1000 * num_cohorts, Method = \u0026#39;Sims (N=1000)\u0026#39;), tibble(NumCohorts = num_cohorts, NumModelFits = 10000 * num_cohorts, Method = \u0026#39;Sims (N=10000)\u0026#39;), ) %\u0026gt;% ggplot(aes(x = NumCohorts, y = NumModelFits, col = Method)) + geom_point() + geom_line() + scale_y_log10() + labs(y = \u0026#39;Number of model fits\u0026#39;, x = \u0026#39;Number of patients\u0026#39;, title = \u0026#39;Computational burden of dose paths and simulation\u0026#39;) Again, we see that paths are much more efficient for low sample sizes, but sample sizes in excess of 12 - 16 patients favour simulation.\nAssuming that dose-finding trials generally have sample sizes of 20-40 patients, that would seem to suggest that simulations clearly vanquish dose-paths for practical use. However, there is one last major consideration to understand.\nDose paths can be recycled The computational burdens are calculated above for a single batch of simulations corresponding to a single set of assumed outcome probabilities. Generally, simulation studies to justify dose-finding designs use many scenarios. On the number of scenarios to investigate, Wheeler et al. (2019) advocate that:\n the simulation study should include:\n scenarios where each dose is in fact the MTD; two extreme scenarios, in which the lowest dose is above the MTD and the highest dose is below the MTD; and any others that clinicians believe are plausible.   where MTD means the maximum tolerable dose or the notional target dose. Thus, Wheeler et al. advocate at least \\(J + 2\\) scenarios, where \\(J\\) is the number of doses under investigation. The total computational burden for a simulation study of \\(S\\) scenarios is therefore bounded by \\(NMS\\). I say bounded by rather than equal to because some trials may stop early, depending on design.\nSimulations are arduous because in each scenario you start from scratch. In stark contrast, dose-paths are reusable. Calculating all dose paths is a relatively costly exercise. But once they have been calculated, crystallising the dose-paths with true outcome probabilities to calculate exact operating performance in a scenario is a relatively cheap computation. The total computational burden under dose-paths will increase much slower than linearly in \\(S\\). Put another way, the time required to produce inference on one scenario is of the same order of magnitude as producing inference on many. It pays to be thorough and with dose-paths, the incremental work to analyse an extra scenario is small.\n  Conclusion The number of nodes in a graph of dose paths increases exponentially in the number of cohorts. For 10 cohorts of three patients, approximately 10 times as many model fits are required in dose paths compared to simulations with \\(N = 10000\\) replicates (recall that the \\(y\\)-axes above are logarithmic). That is, we expect simulations to be computationally cheaper here if fewer than 10 scenarios are investigated. When the models are evaluated after each patient, dose-paths using \\(n=30\\) patients require more than \\(10^3 = 1000\\) times the number of model fits. Simulations are clearly preferable here.\nHowever, we know that dose-paths are more precise. Unlike the simulation method, inferences from dose paths are exact because they are free from Monte Carlo error.\nWhen investigating the operating performance of a clinical trial design, researchers spend computer time to increase certainty. When deciding whether to perform inference via dose paths or simulation, I propose there are three situations:\nIn trials with a small number of cohorts, dose-paths will be both faster and more precise and should naturally be the preferred method for inference. In trials with a modest number of cohorts and many scenarios to analyse, dose-paths will have a similar total computational burden to simulations. In these situations, the extra precision of dose-paths will make them preferable. Finally there will be trials with a high number of cohorts where dose-paths are simply infeasible to calculate. Here, simulations will be preferred.  A way to investgate the value of the two methods in practice is, ironically, a simulation study. This would require plausible assumptions on the number of model fits that should be expected in a trial and how many scenarios would be used to evaluate designs. That feels like it needs a review of the literature but it will have to wait because today I am out of time.\n References Brock, Kristian, Lucinda Billingham, Mhairi Copland, Shamyla Siddique, Mirjana Sirovica, and Christina Yap. 2017. “Implementing the EffTox Dose-Finding Design in the Matchpoint Trial.” BMC Medical Research Methodology 17 (1): 112. https://doi.org/10.1186/s12874-017-0381-x.\n Wheeler, Graham M., Adrian P. Mander, Alun Bedding, Kristian Brock, Victoria Cornelius, Andrew P. Grieve, Thomas Jaki, et al. 2019. “How to Design a Dose-Finding Study Using the Continual Reassessment Method.” BMC Medical Research Methodology 19 (1). https://doi.org/10.1186/s12874-018-0638-z.\n Yap, Christina, Lucinda J. Billingham, Ying Kuen Cheung, Charlie Craddock, and John O’Quigley. 2017. “Dose Transition Pathways: The Missing Link Between Complex Dose-Finding Designs and Simple Decision-Making.” Clinical Cancer Research 23 (24): 7440–7. https://doi.org/10.1158/1078-0432.CCR-17-0582.\n   ","date":1587600000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589396252,"objectID":"f7e08de41325cc94136822c067634b0c","permalink":"https://www.kristianbrock.com/post/simulate-vs-enumerate-dose-finding/","publishdate":"2020-04-23T00:00:00Z","relpermalink":"/post/simulate-vs-enumerate-dose-finding/","section":"post","summary":"Simulation is the popular approach but brute-force enumeration is more accurate and can even be quicker.","tags":["escalation","R","DoseFinding"],"title":"Simulation or enumeration with dose-finding designs?","type":"post"},{"authors":["Kristian Brock"],"categories":["Code"],"content":"    Introduction Dose-finding clinical trials investigate experimental agents, seeking doses that are tolerable and active. They commonly use some dose-selection model to analyse binary outcomes at increasing doses in cohorts of patients. It is possible to analyse the behaviour of a dose-finding design by exhaustively calculating every possible set of outcomes and invoking the dose selection model on each. We will refer to these hypothetical sequences of doses in response to outcomes as dose-paths.\nAn example will make this clear. The 3+3 design is widely understood. One of its benefits is its simplicity. Let us investigate the first two cohorts of three patients in the 3+3 variant that permits de-escalation. We calculate dose-paths in escalation using the get_dose_paths function:\nlibrary(escalation) ## Loading required package: magrittr paths \u0026lt;- get_three_plus_three(num_doses = 5, allow_deescalate = TRUE) %\u0026gt;% get_dose_paths(cohort_sizes = c(3, 3)) get_dose_paths takes a dose-selection methodology and enumerates every possible path according to the cohort sizes that you specify. The returned paths object contains lot of information but the most pertinent perhaps is the sequence of dose-recommendations in response to hypothetical outcomes:\npaths ## Give dose 1: ## NNN -\u0026gt; 2 ## NNN -\u0026gt; 3 ## NNT -\u0026gt; 2 ## NTT -\u0026gt; 1 ## TTT -\u0026gt; 1 ## NNT -\u0026gt; 1 ## NNN -\u0026gt; 2 ## NNT -\u0026gt; NA ## NTT -\u0026gt; NA ## TTT -\u0026gt; NA ## NTT -\u0026gt; NA ## TTT -\u0026gt; NA We see above that the trial starts at dose 1. If three non-toxicities (N) are seen, the algorithm advocates escalation to dose 2. In constrast if two or more toxicities (T) are seen in the first cohort, no dose is selected (the dose is NA) and the trial stops. Subsequent cohorts are represented by greater levels of indentation.\nThis information is better represented by a graph. If you are using RStudio, the graph will appear in the Viewer pane. (In this vignette, we suppress non-RStudio demonstration of the graphs to avoid problems on CRAN computers.)\ngraph_paths(paths)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#7AD151FF\\\", fillcolor = \\\"#414487FF\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#2A788EFF\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#22A884FF\\\"] \\n \\\"4\\\" [label = \\\"1\\\", fontcolor = \\\"#7AD151FF\\\", fillcolor = \\\"#414487FF\\\"] \\n \\\"5\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#2A788EFF\\\"] \\n \\\"6\\\" [label = \\\"Stop\\\", fontcolor = \\\"#22A884FF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"7\\\" [label = \\\"Stop\\\", fontcolor = \\\"#22A884FF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"8\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#2A788EFF\\\"] \\n \\\"9\\\" [label = \\\"Stop\\\", fontcolor = \\\"#22A884FF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#7AD151FF\\\", fillcolor = \\\"#414487FF\\\"] \\n \\\"11\\\" [label = \\\"Stop\\\", fontcolor = \\\"#22A884FF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#7AD151FF\\\", fillcolor = \\\"#414487FF\\\"] \\n \\\"13\\\" [label = \\\"Stop\\\", fontcolor = \\\"#22A884FF\\\", fillcolor = \\\"#440154FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"1\\\"-\\\"7\\\" [label = \\\"TTT\\\"] \\n\\\"2\\\"-\\\"8\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"9\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"11\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"12\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"13\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} The blue node towards the centre bearing the number 1 represents the start of the trial. The edges of the graph (the lines connecting the nodes) represent the outcomes in cohorts of patients. As before, we see that if three N events are seen, the trial escalates to dose 2. Three patients are assumed to be treated at that dose and from there, further escalation to dose 3 will be advised if no toxicity is seen. In contrast, dose 2 will be retained for a further cohort of three if a single toxicity is seen, and de-escalation to dose 1 will occur if two or more toxicities are seen. This is exactly the behaviour we expect from the 3+3 design.\nDose-paths were introduced in the phase I setting that we consider here by Yap et al. (2017). Their phase I/II analogue was introduced by Brock et al. (2017) for dose-finding trials that consider efficacy and toxicity outcomes.\n Other Models CRM The above example uses the 3+3 design but other methods are available. In fact, early phase statisticians would much prefer that you use a model-based method (Wheeler et al. 2019). The escalation package is intentionally written so that all dose selectors look the same, regardless the implementation-level details. In computing terminology, dose selectors in escalation support a common interface. This makes it trivial to calculate dose-paths for all dose-selectors - we just use the get_dose_paths function again.\nLet us investigate a continual reassessment method (CRM) design now, as described by O’Quigley, Pepe, and Fisher (1990) and implemented by the dfcrm package (Cheung 2013). We must specify a dose-toxicity skeleton, and a target toxicity level:\nskeleton \u0026lt;- c(0.05, 0.1, 0.25, 0.4, 0.6) target \u0026lt;- 0.25 We can then specify a CRM model and calculate dose-paths as before:\npaths \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = c(3, 3)) When we graph the paths this time (and adopt a different colour palette for fun):\ngraph_paths(paths, viridis_palette = \u0026#39;magma\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"2\\\" [label = \\\"4\\\", fontcolor = \\\"#3B0F70FF\\\", fillcolor = \\\"#FE9F6DFF\\\"] \\n \\\"3\\\" [label = \\\"5\\\", fontcolor = \\\"#8C2981FF\\\", fillcolor = \\\"#FCFDBFFF\\\"] \\n \\\"4\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"5\\\" [label = \\\"2\\\", fontcolor = \\\"#FCFDBFFF\\\", fillcolor = \\\"#8C2981FF\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"8\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"10\\\" [label = \\\"3\\\", fontcolor = \\\"#000004FF\\\", fillcolor = \\\"#DE4968FF\\\"] \\n \\\"11\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"14\\\" [label = \\\"2\\\", fontcolor = \\\"#FCFDBFFF\\\", fillcolor = \\\"#8C2981FF\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"16\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"17\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"20\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#FE9F6DFF\\\", fillcolor = \\\"#3B0F70FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"12\\\" [label = \\\"NNT\\\"] \\n\\\"8\\\"-\\\"13\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"15\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"16\\\" [label = \\\"NTT\\\"] \\n\\\"8\\\"-\\\"17\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"18\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"19\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"20\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"21\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} we see that the Stop node is absent - all paths recommend a dose, even those seeing substantial toxicity. Stopping behaviours must be specified for the CRM method. Fortunately, escalation makes this simple.\nAn intuitive method for stopping in the Bayesian setting is to test the posterior distribution for the probability of toxicity. In our example, we will stop if there is at least a 90% probability that the toxicity rate at the lowest dose is 35% or greater:\npaths \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %\u0026gt;% get_dose_paths(cohort_sizes = c(3, 3)) When we visualise the paths from the updated model:\ngraph_paths(paths, viridis_palette = \u0026#39;inferno\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"2\\\" [label = \\\"4\\\", fontcolor = \\\"#420A68FF\\\", fillcolor = \\\"#FCA50AFF\\\"] \\n \\\"3\\\" [label = \\\"5\\\", fontcolor = \\\"#932667FF\\\", fillcolor = \\\"#FCFFA4FF\\\"] \\n \\\"4\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"5\\\" [label = \\\"2\\\", fontcolor = \\\"#FCFFA4FF\\\", fillcolor = \\\"#932667FF\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"8\\\" [label = \\\"Stop\\\", fontcolor = \\\"#DD513AFF\\\", fillcolor = \\\"#000004FF\\\"] \\n \\\"9\\\" [label = \\\"3\\\", fontcolor = \\\"#000004FF\\\", fillcolor = \\\"#DD513AFF\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"11\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"12\\\" [label = \\\"2\\\", fontcolor = \\\"#FCFFA4FF\\\", fillcolor = \\\"#932667FF\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"14\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"16\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA50AFF\\\", fillcolor = \\\"#420A68FF\\\"] \\n \\\"17\\\" [label = \\\"Stop\\\", fontcolor = \\\"#DD513AFF\\\", fillcolor = \\\"#000004FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"2\\\"-\\\"9\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"12\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"13\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"15\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"16\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"17\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} we see that some paths once again recommend stopping. The paths that recommend a dose are otherwise unchanged.\n BOIN Another dose-escalation model implemented in escalation is the Bayesian optimal interval (BOIN) method by Liu and Yuan (2015), implemented in the BOIN package (Yuan and Liu 2018).\nTo spice things up, we will visualise how this model behaves over four cohorts of two patients:\npaths \u0026lt;- get_boin(num_doses = 4, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = rep(2, 4)) ## You have requested 121 model evaluations. Be patient. graph_paths(paths, RColorBrewer_palette = \u0026#39;YlOrRd\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"4\\\" [label = \\\"4\\\", fontcolor = \\\"#FECC5C\\\", fillcolor = \\\"#BD0026\\\"] \\n \\\"5\\\" [label = \\\"4\\\", fontcolor = \\\"#FECC5C\\\", fillcolor = \\\"#BD0026\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"8\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"9\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"11\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"14\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"15\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"16\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"17\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"20\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"22\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"23\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"24\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"25\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"26\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"27\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"28\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"29\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"30\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"31\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"32\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"33\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"34\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"35\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"36\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"37\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"38\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"39\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"40\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"41\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"42\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"43\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"44\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"45\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"46\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"47\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"48\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"49\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"50\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"51\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"52\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"53\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"54\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"55\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"56\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"57\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"58\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"59\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"60\\\" [label = \\\"2\\\", fontcolor = \\\"#BD0026\\\", fillcolor = \\\"#FD8D3C\\\"] \\n \\\"61\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"62\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"63\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"64\\\" [label = \\\"3\\\", fontcolor = \\\"#FFFFB2\\\", fillcolor = \\\"#F03B20\\\"] \\n \\\"65\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"66\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"67\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"68\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"69\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"70\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"71\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"72\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"73\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"74\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"75\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"76\\\" [label = \\\"1\\\", fontcolor = \\\"#F03B20\\\", fillcolor = \\\"#FECC5C\\\"] \\n \\\"77\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"78\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n \\\"79\\\" [label = \\\"Stop\\\", fontcolor = \\\"#FD8D3C\\\", fillcolor = \\\"#FFFFB2\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NN\\\"] \\n\\\"3\\\"-\\\"4\\\" [label = \\\"NN\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NN\\\"] \\n\\\"7\\\"-\\\"8\\\" [label = \\\"NN\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"NN\\\"] \\n\\\"1\\\"-\\\"10\\\" [label = \\\"TT\\\"] \\n\\\"10\\\"-\\\"11\\\" [label = \\\"NN\\\"] \\n\\\"11\\\"-\\\"12\\\" [label = \\\"NN\\\"] \\n\\\"12\\\"-\\\"13\\\" [label = \\\"NN\\\"] \\n\\\"2\\\"-\\\"14\\\" [label = \\\"NT\\\"] \\n\\\"14\\\"-\\\"15\\\" [label = \\\"NN\\\"] \\n\\\"15\\\"-\\\"16\\\" [label = \\\"NN\\\"] \\n\\\"6\\\"-\\\"17\\\" [label = \\\"NT\\\"] \\n\\\"17\\\"-\\\"18\\\" [label = \\\"NN\\\"] \\n\\\"18\\\"-\\\"19\\\" [label = \\\"NN\\\"] \\n\\\"10\\\"-\\\"20\\\" [label = \\\"NT\\\"] \\n\\\"2\\\"-\\\"21\\\" [label = \\\"TT\\\"] \\n\\\"21\\\"-\\\"22\\\" [label = \\\"NN\\\"] \\n\\\"22\\\"-\\\"23\\\" [label = \\\"NN\\\"] \\n\\\"6\\\"-\\\"24\\\" [label = \\\"TT\\\"] \\n\\\"10\\\"-\\\"25\\\" [label = \\\"TT\\\"] \\n\\\"3\\\"-\\\"26\\\" [label = \\\"NT\\\"] \\n\\\"26\\\"-\\\"27\\\" [label = \\\"NN\\\"] \\n\\\"7\\\"-\\\"28\\\" [label = \\\"NT\\\"] \\n\\\"28\\\"-\\\"29\\\" [label = \\\"NN\\\"] \\n\\\"11\\\"-\\\"30\\\" [label = \\\"NT\\\"] \\n\\\"30\\\"-\\\"31\\\" [label = \\\"NN\\\"] \\n\\\"14\\\"-\\\"32\\\" [label = \\\"NT\\\"] \\n\\\"32\\\"-\\\"33\\\" [label = \\\"NN\\\"] \\n\\\"17\\\"-\\\"34\\\" [label = \\\"NT\\\"] \\n\\\"34\\\"-\\\"35\\\" [label = \\\"NN\\\"] \\n\\\"21\\\"-\\\"36\\\" [label = \\\"NT\\\"] \\n\\\"36\\\"-\\\"37\\\" [label = \\\"NN\\\"] \\n\\\"3\\\"-\\\"38\\\" [label = \\\"TT\\\"] \\n\\\"38\\\"-\\\"39\\\" [label = \\\"NN\\\"] \\n\\\"7\\\"-\\\"40\\\" [label = \\\"TT\\\"] \\n\\\"40\\\"-\\\"41\\\" [label = \\\"NN\\\"] \\n\\\"11\\\"-\\\"42\\\" [label = \\\"TT\\\"] \\n\\\"14\\\"-\\\"43\\\" [label = \\\"TT\\\"] \\n\\\"43\\\"-\\\"44\\\" [label = \\\"NN\\\"] \\n\\\"17\\\"-\\\"45\\\" [label = \\\"TT\\\"] \\n\\\"21\\\"-\\\"46\\\" [label = \\\"TT\\\"] \\n\\\"46\\\"-\\\"47\\\" [label = \\\"NN\\\"] \\n\\\"4\\\"-\\\"48\\\" [label = \\\"NT\\\"] \\n\\\"8\\\"-\\\"49\\\" [label = \\\"NT\\\"] \\n\\\"12\\\"-\\\"50\\\" [label = \\\"NT\\\"] \\n\\\"15\\\"-\\\"51\\\" [label = \\\"NT\\\"] \\n\\\"18\\\"-\\\"52\\\" [label = \\\"NT\\\"] \\n\\\"22\\\"-\\\"53\\\" [label = \\\"NT\\\"] \\n\\\"26\\\"-\\\"54\\\" [label = \\\"NT\\\"] \\n\\\"28\\\"-\\\"55\\\" [label = \\\"NT\\\"] \\n\\\"30\\\"-\\\"56\\\" [label = \\\"NT\\\"] \\n\\\"32\\\"-\\\"57\\\" [label = \\\"NT\\\"] \\n\\\"34\\\"-\\\"58\\\" [label = \\\"NT\\\"] \\n\\\"36\\\"-\\\"59\\\" [label = \\\"NT\\\"] \\n\\\"38\\\"-\\\"60\\\" [label = \\\"NT\\\"] \\n\\\"40\\\"-\\\"61\\\" [label = \\\"NT\\\"] \\n\\\"43\\\"-\\\"62\\\" [label = \\\"NT\\\"] \\n\\\"46\\\"-\\\"63\\\" [label = \\\"NT\\\"] \\n\\\"4\\\"-\\\"64\\\" [label = \\\"TT\\\"] \\n\\\"8\\\"-\\\"65\\\" [label = \\\"TT\\\"] \\n\\\"12\\\"-\\\"66\\\" [label = \\\"TT\\\"] \\n\\\"15\\\"-\\\"67\\\" [label = \\\"TT\\\"] \\n\\\"18\\\"-\\\"68\\\" [label = \\\"TT\\\"] \\n\\\"22\\\"-\\\"69\\\" [label = \\\"TT\\\"] \\n\\\"26\\\"-\\\"70\\\" [label = \\\"TT\\\"] \\n\\\"28\\\"-\\\"71\\\" [label = \\\"TT\\\"] \\n\\\"30\\\"-\\\"72\\\" [label = \\\"TT\\\"] \\n\\\"32\\\"-\\\"73\\\" [label = \\\"TT\\\"] \\n\\\"34\\\"-\\\"74\\\" [label = \\\"TT\\\"] \\n\\\"36\\\"-\\\"75\\\" [label = \\\"TT\\\"] \\n\\\"38\\\"-\\\"76\\\" [label = \\\"TT\\\"] \\n\\\"40\\\"-\\\"77\\\" [label = \\\"TT\\\"] \\n\\\"43\\\"-\\\"78\\\" [label = \\\"TT\\\"] \\n\\\"46\\\"-\\\"79\\\" [label = \\\"TT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} The first thing to note about the graph above is that it is much more complex than the previous graphs. The number of nodes in dose-paths increases faster than linearly as more cohorts are considered. Consideration of this must be given when visualising dose-paths.\nSecondly, the visual method makes it simple to discern messages about future model behaviour. For instance, we can easily see that dose 4, the darkest red node, is only reached in the first four cohorts if the first cohort sees no toxicity.\nIn contrast to CRM, BOIN does have a stopping rule for excess toxicity built in. We see that TT in the first cohort is not enough to advocate stopping but that any further toxicity in the second cohort will be sufficient to warrant stopping.\n  Further options Non-uniform cohorts There is no reason that the cohort sizes should be uniform. Specify whatever cohort_sizes you like:\npaths \u0026lt;- get_boin(num_doses = 4, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = c(3, 1, 2)) graph_paths(paths, RColorBrewer_palette = \u0026#39;Blues\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#08519C\\\", fillcolor = \\\"#6BAED6\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#EFF3FF\\\", fillcolor = \\\"#3182BD\\\"] \\n \\\"4\\\" [label = \\\"4\\\", fontcolor = \\\"#BDD7E7\\\", fillcolor = \\\"#08519C\\\"] \\n \\\"5\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"7\\\" [label = \\\"2\\\", fontcolor = \\\"#08519C\\\", fillcolor = \\\"#6BAED6\\\"] \\n \\\"8\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"11\\\" [label = \\\"Stop\\\", fontcolor = \\\"#6BAED6\\\", fillcolor = \\\"#EFF3FF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"13\\\" [label = \\\"2\\\", fontcolor = \\\"#08519C\\\", fillcolor = \\\"#6BAED6\\\"] \\n \\\"14\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"16\\\" [label = \\\"Stop\\\", fontcolor = \\\"#6BAED6\\\", fillcolor = \\\"#EFF3FF\\\"] \\n \\\"17\\\" [label = \\\"2\\\", fontcolor = \\\"#08519C\\\", fillcolor = \\\"#6BAED6\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"20\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"22\\\" [label = \\\"2\\\", fontcolor = \\\"#08519C\\\", fillcolor = \\\"#6BAED6\\\"] \\n \\\"23\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"24\\\" [label = \\\"Stop\\\", fontcolor = \\\"#6BAED6\\\", fillcolor = \\\"#EFF3FF\\\"] \\n \\\"25\\\" [label = \\\"1\\\", fontcolor = \\\"#3182BD\\\", fillcolor = \\\"#BDD7E7\\\"] \\n \\\"26\\\" [label = \\\"Stop\\\", fontcolor = \\\"#6BAED6\\\", fillcolor = \\\"#EFF3FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"N\\\"] \\n\\\"3\\\"-\\\"4\\\" [label = \\\"NN\\\"] \\n\\\"1\\\"-\\\"5\\\" [label = \\\"NNT\\\"] \\n\\\"5\\\"-\\\"6\\\" [label = \\\"N\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"NTT\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"N\\\"] \\n\\\"9\\\"-\\\"10\\\" [label = \\\"NN\\\"] \\n\\\"1\\\"-\\\"11\\\" [label = \\\"TTT\\\"] \\n\\\"2\\\"-\\\"12\\\" [label = \\\"T\\\"] \\n\\\"12\\\"-\\\"13\\\" [label = \\\"NN\\\"] \\n\\\"5\\\"-\\\"14\\\" [label = \\\"T\\\"] \\n\\\"14\\\"-\\\"15\\\" [label = \\\"NN\\\"] \\n\\\"8\\\"-\\\"16\\\" [label = \\\"T\\\"] \\n\\\"3\\\"-\\\"17\\\" [label = \\\"NT\\\"] \\n\\\"6\\\"-\\\"18\\\" [label = \\\"NT\\\"] \\n\\\"9\\\"-\\\"19\\\" [label = \\\"NT\\\"] \\n\\\"12\\\"-\\\"20\\\" [label = \\\"NT\\\"] \\n\\\"14\\\"-\\\"21\\\" [label = \\\"NT\\\"] \\n\\\"3\\\"-\\\"22\\\" [label = \\\"TT\\\"] \\n\\\"6\\\"-\\\"23\\\" [label = \\\"TT\\\"] \\n\\\"9\\\"-\\\"24\\\" [label = \\\"TT\\\"] \\n\\\"12\\\"-\\\"25\\\" [label = \\\"TT\\\"] \\n\\\"14\\\"-\\\"26\\\" [label = \\\"TT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} You can even evaluate the dose advice after each patient using cohort sizes of 1:\npaths \u0026lt;- get_boin(num_doses = 4, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = rep(1, 4)) graph_paths(paths, RColorBrewer_palette = \u0026#39;RdPu\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#7A0177\\\", fillcolor = \\\"#F768A1\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#FEEBE2\\\", fillcolor = \\\"#C51B8A\\\"] \\n \\\"4\\\" [label = \\\"4\\\", fontcolor = \\\"#FBB4B9\\\", fillcolor = \\\"#7A0177\\\"] \\n \\\"5\\\" [label = \\\"4\\\", fontcolor = \\\"#FBB4B9\\\", fillcolor = \\\"#7A0177\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"8\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"11\\\" [label = \\\"2\\\", fontcolor = \\\"#7A0177\\\", fillcolor = \\\"#F768A1\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"14\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"16\\\" [label = \\\"2\\\", fontcolor = \\\"#7A0177\\\", fillcolor = \\\"#F768A1\\\"] \\n \\\"17\\\" [label = \\\"3\\\", fontcolor = \\\"#FEEBE2\\\", fillcolor = \\\"#C51B8A\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"20\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"22\\\" [label = \\\"Stop\\\", fontcolor = \\\"#F768A1\\\", fillcolor = \\\"#FEEBE2\\\"] \\n \\\"23\\\" [label = \\\"3\\\", fontcolor = \\\"#FEEBE2\\\", fillcolor = \\\"#C51B8A\\\"] \\n \\\"24\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"25\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"26\\\" [label = \\\"Stop\\\", fontcolor = \\\"#F768A1\\\", fillcolor = \\\"#FEEBE2\\\"] \\n \\\"27\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n \\\"28\\\" [label = \\\"Stop\\\", fontcolor = \\\"#F768A1\\\", fillcolor = \\\"#FEEBE2\\\"] \\n \\\"29\\\" [label = \\\"1\\\", fontcolor = \\\"#C51B8A\\\", fillcolor = \\\"#FBB4B9\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"N\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"N\\\"] \\n\\\"3\\\"-\\\"4\\\" [label = \\\"N\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"N\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"T\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"N\\\"] \\n\\\"7\\\"-\\\"8\\\" [label = \\\"N\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"N\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"T\\\"] \\n\\\"10\\\"-\\\"11\\\" [label = \\\"N\\\"] \\n\\\"11\\\"-\\\"12\\\" [label = \\\"N\\\"] \\n\\\"6\\\"-\\\"13\\\" [label = \\\"T\\\"] \\n\\\"13\\\"-\\\"14\\\" [label = \\\"N\\\"] \\n\\\"14\\\"-\\\"15\\\" [label = \\\"N\\\"] \\n\\\"3\\\"-\\\"16\\\" [label = \\\"T\\\"] \\n\\\"16\\\"-\\\"17\\\" [label = \\\"N\\\"] \\n\\\"7\\\"-\\\"18\\\" [label = \\\"T\\\"] \\n\\\"18\\\"-\\\"19\\\" [label = \\\"N\\\"] \\n\\\"10\\\"-\\\"20\\\" [label = \\\"T\\\"] \\n\\\"20\\\"-\\\"21\\\" [label = \\\"N\\\"] \\n\\\"13\\\"-\\\"22\\\" [label = \\\"T\\\"] \\n\\\"4\\\"-\\\"23\\\" [label = \\\"T\\\"] \\n\\\"8\\\"-\\\"24\\\" [label = \\\"T\\\"] \\n\\\"11\\\"-\\\"25\\\" [label = \\\"T\\\"] \\n\\\"14\\\"-\\\"26\\\" [label = \\\"T\\\"] \\n\\\"16\\\"-\\\"27\\\" [label = \\\"T\\\"] \\n\\\"18\\\"-\\\"28\\\" [label = \\\"T\\\"] \\n\\\"20\\\"-\\\"29\\\" [label = \\\"T\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}  Partially completed trials It is possible to calculate dose-paths from trials that are partially completed. For instance, let us continue with our BOIN model and assume that we have seen outcomes 1NNN 2TNT so far in our trial. Thus, we are reasonably sure that dose 1 is safe but wary that dose 2 might be too toxic. However, these beliefs are tempered by the tiny sample size. From this starting point, how might the next two cohorts of three proceed? We just specify the previous outcomes using the previous_outcomes parameter:\npaths \u0026lt;- get_boin(num_doses = 4, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 2), previous_outcomes = \u0026#39;1NNN 2TNT\u0026#39;) graph_paths(paths, viridis_palette = \u0026#39;viridis\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#21908CFF\\\"] \\n \\\"3\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"4\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#21908CFF\\\"] \\n \\\"5\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"8\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"11\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"14\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"16\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"17\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"18\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"19\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"20\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"21\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"12\\\" [label = \\\"NNT\\\"] \\n\\\"8\\\"-\\\"13\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"15\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"16\\\" [label = \\\"NTT\\\"] \\n\\\"8\\\"-\\\"17\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"18\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"19\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"20\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"21\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} Notice how this is different to the advice we get at the start of the trial (i.e. when omitting the previous_outcomes):\npaths \u0026lt;- get_boin(num_doses = 4, target = target) %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 2)) graph_paths(paths, viridis_palette = \u0026#39;viridis\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"2\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#21908CFF\\\"] \\n \\\"3\\\" [label = \\\"3\\\", fontcolor = \\\"#440154FF\\\", fillcolor = \\\"#5DC863FF\\\"] \\n \\\"4\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"5\\\" [label = \\\"2\\\", fontcolor = \\\"#FDE725FF\\\", fillcolor = \\\"#21908CFF\\\"] \\n \\\"6\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"7\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"8\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"9\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"10\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"11\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"12\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"13\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"14\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"15\\\" [label = \\\"1\\\", fontcolor = \\\"#5DC863FF\\\", fillcolor = \\\"#3B528BFF\\\"] \\n \\\"16\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n \\\"17\\\" [label = \\\"Stop\\\", fontcolor = \\\"#21908CFF\\\", fillcolor = \\\"#440154FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"2\\\"-\\\"9\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"12\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"13\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"15\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"16\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"17\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} This is a feature of model-based methods like CRM and BOIN - they use all information at all doses when making dose decisions. They are not memoryless like the 3+3.\n Next dose The dose at which dose-paths commence is inferred from the model. It can be specified manually, however:\npaths \u0026lt;- get_three_plus_three(num_doses = 5, allow_deescalate = TRUE) %\u0026gt;% get_dose_paths(cohort_sizes = c(3, 3), next_dose = 3) graph_paths(paths, viridis_palette = \u0026#39;plasma\u0026#39;)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"neato\\\",\\n outputorder = \\\"edgesfirst\\\",\\n bgcolor = \\\"white\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"10\\\",\\n shape = \\\"circle\\\",\\n fixedsize = \\\"true\\\",\\n width = \\\"0.5\\\",\\n style = \\\"filled\\\",\\n fillcolor = \\\"aliceblue\\\",\\n color = \\\"gray70\\\",\\n fontcolor = \\\"gray50\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n fontsize = \\\"8\\\",\\n len = \\\"1.5\\\",\\n color = \\\"gray80\\\",\\n arrowsize = \\\"0.5\\\"]\\n\\n \\\"1\\\" [label = \\\"3\\\", fontcolor = \\\"#0D0887FF\\\", fillcolor = \\\"#E16462FF\\\"] \\n \\\"2\\\" [label = \\\"4\\\", fontcolor = \\\"#6A00A8FF\\\", fillcolor = \\\"#FCA636FF\\\"] \\n \\\"3\\\" [label = \\\"5\\\", fontcolor = \\\"#B12A90FF\\\", fillcolor = \\\"#F0F921FF\\\"] \\n \\\"4\\\" [label = \\\"3\\\", fontcolor = \\\"#0D0887FF\\\", fillcolor = \\\"#E16462FF\\\"] \\n \\\"5\\\" [label = \\\"4\\\", fontcolor = \\\"#6A00A8FF\\\", fillcolor = \\\"#FCA636FF\\\"] \\n \\\"6\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"7\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"8\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"9\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"10\\\" [label = \\\"4\\\", fontcolor = \\\"#6A00A8FF\\\", fillcolor = \\\"#FCA636FF\\\"] \\n \\\"11\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"12\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"13\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"14\\\" [label = \\\"3\\\", fontcolor = \\\"#0D0887FF\\\", fillcolor = \\\"#E16462FF\\\"] \\n \\\"15\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"16\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA636FF\\\", fillcolor = \\\"#6A00A8FF\\\"] \\n \\\"17\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA636FF\\\", fillcolor = \\\"#6A00A8FF\\\"] \\n \\\"18\\\" [label = \\\"3\\\", fontcolor = \\\"#0D0887FF\\\", fillcolor = \\\"#E16462FF\\\"] \\n \\\"19\\\" [label = \\\"2\\\", fontcolor = \\\"#F0F921FF\\\", fillcolor = \\\"#B12A90FF\\\"] \\n \\\"20\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA636FF\\\", fillcolor = \\\"#6A00A8FF\\\"] \\n \\\"21\\\" [label = \\\"1\\\", fontcolor = \\\"#FCA636FF\\\", fillcolor = \\\"#6A00A8FF\\\"] \\n\\\"1\\\"-\\\"2\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"3\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"4\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"5\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"6\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"7\\\" [label = \\\"NNN\\\"] \\n\\\"1\\\"-\\\"8\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"9\\\" [label = \\\"NNN\\\"] \\n\\\"2\\\"-\\\"10\\\" [label = \\\"NNT\\\"] \\n\\\"4\\\"-\\\"11\\\" [label = \\\"NNT\\\"] \\n\\\"6\\\"-\\\"12\\\" [label = \\\"NNT\\\"] \\n\\\"8\\\"-\\\"13\\\" [label = \\\"NNT\\\"] \\n\\\"2\\\"-\\\"14\\\" [label = \\\"NTT\\\"] \\n\\\"4\\\"-\\\"15\\\" [label = \\\"NTT\\\"] \\n\\\"6\\\"-\\\"16\\\" [label = \\\"NTT\\\"] \\n\\\"8\\\"-\\\"17\\\" [label = \\\"NTT\\\"] \\n\\\"2\\\"-\\\"18\\\" [label = \\\"TTT\\\"] \\n\\\"4\\\"-\\\"19\\\" [label = \\\"TTT\\\"] \\n\\\"6\\\"-\\\"20\\\" [label = \\\"TTT\\\"] \\n\\\"8\\\"-\\\"21\\\" [label = \\\"TTT\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} A 3+3 trial with de-escalation enabled will de-escalate through the doses when toxicity is seen, as expected.\n  Crystallised dose-paths Calculating dose-paths is useful for visually examining the conditions under which a dose-finding design would escalate or de-escalate or stop. However, that is only part of the story. When we marry dose-paths with assumed true event probabilities, we can calculate exact operating characteristics of a design. We refer to this as crystallising dose paths because the likelihood of each path has been calculated precisely according to an assumed truth.\nFor instance, we can calculate dose-paths for the first four cohorts of three patients using the CRM with stopping design that we specified previously:\nskeleton \u0026lt;- c(0.05, 0.1, 0.25, 0.4, 0.6) target \u0026lt;- 0.25 paths \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 4)) ## You have requested 341 model evaluations. Be patient. We can then crystallise the paths using toxicity probabilities that exactly match the beliefs in our skeleton:\ntrue_prob_tox \u0026lt;- skeleton x \u0026lt;- paths %\u0026gt;% calculate_probabilities(true_prob_tox = true_prob_tox) x ## Number of nodes: 213 ## Number of terminal nodes: 160 ## ## Number of doses: 5 ## ## True probability of toxicity: ## 1 2 3 4 5 ## 0.05 0.10 0.25 0.40 0.60 ## ## Probability of recommendation: ## NoDose 1 2 3 4 5 ## 0.000127 0.019866 0.227135 0.451791 0.273014 0.028066 ## ## Probability of continuance: ## [1] 1 ## ## Probability of administration: ## 1 2 3 4 5 ## 0.3172 0.1602 0.1867 0.2734 0.0626 ## ## Expected sample size: ## [1] 11.99887 ## ## Expected total toxicities: ## [1] 2.705489 We see that in this scenario, the probability of a path stopping and advocating no dose within the first four cohorts is very close to zero. In contrast, when the toxicity probabilities are much greater than anticipated:\ntrue_prob_tox \u0026lt;- c(0.45, 0.6, 0.68, 0.75, 0.81) x \u0026lt;- paths %\u0026gt;% calculate_probabilities(true_prob_tox = true_prob_tox) x ## Number of nodes: 213 ## Number of terminal nodes: 160 ## ## Number of doses: 5 ## ## True probability of toxicity: ## 1 2 3 4 5 ## 0.45 0.60 0.68 0.75 0.81 ## ## Probability of recommendation: ## NoDose 1 2 3 4 5 ## 0.3027462 0.6407708 0.0502073 0.0055527 0.0006931 0.0000299 ## ## Probability of continuance: ## [1] 0.697 ## ## Probability of administration: ## 1 2 3 4 5 ## 0.895800 0.052921 0.008539 0.042028 0.000711 ## ## Expected sample size: ## [1] 10.73269 ## ## Expected total toxicities: ## [1] 5.102913 the probability of selecting no dose within these first four cohorts is over 30%. The information labelled Probability of continuance: shows the aggregate probability of paths that are continuing to advocate experimentation at doses, i.e. those paths that do not advocate stopping.\nWe see above that the probability of continuance is 1 minus the probability of selecting no dose. However, this need not necessarily be the case because paths can advocate stopping and recommend a dose. They might do so once it is felt that a suitable dose has been identified. To make this point, let us imagine that we add a rule to our above design that allows stopping once there are 9 patients allocated to the recommended dose. We can think of this as stopping for consensus. Respecifying our model and recalculating dose-paths, we have:\npaths \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %\u0026gt;% stop_when_n_at_dose(dose = \u0026#39;recommended\u0026#39;, n = 9) %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 4)) ## You have requested 341 model evaluations. Be patient. x \u0026lt;- paths %\u0026gt;% calculate_probabilities(true_prob_tox = true_prob_tox) x ## Number of nodes: 141 ## Number of terminal nodes: 106 ## ## Number of doses: 5 ## ## True probability of toxicity: ## 1 2 3 4 5 ## 0.45 0.60 0.68 0.75 0.81 ## ## Probability of recommendation: ## NoDose 1 2 3 4 5 ## 0.2103223 0.7393498 0.0440522 0.0055527 0.0006931 0.0000299 ## ## Probability of continuance: ## [1] 0.137 ## ## Probability of administration: ## 1 2 3 4 5 ## 0.895800 0.052921 0.008539 0.042028 0.000711 ## ## Expected sample size: ## [1] 9.064864 ## ## Expected total toxicities: ## [1] 4.352391 We see that this has reduced our probability of stopping for excess toxicity and inflated our chances of recommending dose 1. Notably, the probability of continuance is now roughly 14%, suggesting that most paths have advocated stopping by now, either for toxicity or concensus.\nIf we do not like that performance, we can make the consensus stopping rule more demanding by requesting 12 at the recommended dose to advocate stopping:\npaths \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %\u0026gt;% stop_when_n_at_dose(dose = \u0026#39;recommended\u0026#39;, n = 12) %\u0026gt;% get_dose_paths(cohort_sizes = rep(3, 4)) ## You have requested 341 model evaluations. Be patient. x \u0026lt;- paths %\u0026gt;% calculate_probabilities(true_prob_tox = true_prob_tox) x ## Number of nodes: 213 ## Number of terminal nodes: 160 ## ## Number of doses: 5 ## ## True probability of toxicity: ## 1 2 3 4 5 ## 0.45 0.60 0.68 0.75 0.81 ## ## Probability of recommendation: ## NoDose 1 2 3 4 5 ## 0.3027462 0.6407708 0.0502073 0.0055527 0.0006931 0.0000299 ## ## Probability of continuance: ## [1] 0.24 ## ## Probability of administration: ## 1 2 3 4 5 ## 0.895800 0.052921 0.008539 0.042028 0.000711 ## ## Expected sample size: ## [1] 10.73269 ## ## Expected total toxicities: ## [1] 5.102913 As usual, deriving an acceptable design is an iterative process. The tools in escalation make it easier to arrive at a design that performs how you want.\nCombining dose-paths with true event probabilities allows probabilistic inference on dose-finding designs. This is a novel extension to the use advocated by Yap et al. (2017) and Brock et al. (2017). The use of exact operating characteristics has been implemented for the 3+3 design in the bcrm package (Sweeting and Wheeler 2019). We generalise the method here.\nDose-paths vs simulation We saw above that probabilistic inference was possible with dose-paths. Researchers have typically used simulation to achieve this task. escalation supports simulation as well through the simulate_trials function. However, this does raise the question, when should you use each method, and what are their relative merits?\nThe answer to the first question comes down to the expected number of model fits required. Fitting dose-finding models takes computer time. In dose-paths, the model is fit once at each node. We have seen examples above of how the number and size of cohorts affects the number of nodes in dose-paths. In fact, escalation provides a function to calculate the number of nodes.\nIn a phase 1 dose-finding trial, each patient experiences exactly one of two outcomes: T or N. Let us calculate how many nodes there are in a graph of dose-paths using five cohorts of three patients. We run:\nnum_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 5)) ## [1] 1 4 16 64 256 1024 The num_patient_outcomes = 2 parameter reflects that patients may experience T or N. The returned vector of integers is the number of nodes at each depth. There is one starting node. That node is connected to four children via outcomes NNN, NNT, NTT, and TTT. The number of nodes at greater depths proceeds multiplicatively thereafter. The total number of nodes is:\nnum_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 5)) %\u0026gt;% sum ## [1] 1365 Thus it requires exactly 1,365 model fits to calculate the exact operating characteristics in this \\(n = 5 \\times 3 = 15\\) patient scenario. To compare this to simulations, consider that each simulated trial iteration will fit the model up to five times, once at the end of each cohort. The total number of model fits in a simulation study is bounded by this number multiplied by the number of simulated iterations. Generally simulation studies use thousands of replicates, so it is easy to see that exact inference via crystallised dose-paths will be much less computaionally burdensome, and therefore faster here.\nIn contrast, now consider a trial of eight cohorts of three. The total number of model fits to enumerate the complete graph of dose-paths is\nnum_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 8)) %\u0026gt;% sum ## [1] 87381 Ten thousand simulated iterations of 8 cohorts each would only require up to 80,000 model fits. Thus, a reasonably accurate simulation study would be expected to be faster here.\nHowever, speed is not the only concern: there is also precision to consider. Simulations have the disadvantage of suffering from Monte Carlo error, that is the uncertainty about the estimated statistics arising from the use of a finite number of simulated iterations. In contrast, exact inference via dose-paths has the great advantage of being exact. That is, there is no uncertainty in the calculated probabilities. (Note: there is still uncertainty about which path will be taken because that is determined by random patient outcomes). Thus, there are scenarios when dose-paths may still be preferable to simulations, even when they are expected to take longer.\nIt is likely that in practice, simulation is often used when dose-paths would be a better option. If true, that would likely be linked to provision of software that performs the two methods. escalation plugs that gap.\n  References Brock, Kristian, Lucinda Billingham, Mhairi Copland, Shamyla Siddique, Mirjana Sirovica, and Christina Yap. 2017. “Implementing the EffTox Dose-Finding Design in the Matchpoint Trial.” BMC Medical Research Methodology 17 (1): 112. https://doi.org/10.1186/s12874-017-0381-x.\n Cheung, Ken. 2013. Dfcrm: Dose-Finding by the Continual Reassessment Method. https://CRAN.R-project.org/package=dfcrm.\n Liu, Suyu, and Ying Yuan. 2015. “Bayesian Optimal Interval Designs for Phase I Clinical Trials.” Journal of the Royal Statistical Society: Series C (Applied Statistics) 64 (3): 507–23. https://doi.org/10.1111/rssc.12089.\n O’Quigley, J, M Pepe, and L Fisher. 1990. “Continual Reassessment Method: A Practical Design for Phase 1 Clinical Trials in Cancer.” Biometrics 46 (1): 33–48. https://doi.org/10.2307/2531628.\n Sweeting, Michael, and Graham Wheeler. 2019. Bcrm: Bayesian Continual Reassessment Method for Phase I Dose-Escalation Trials. https://CRAN.R-project.org/package=bcrm.\n Wheeler, Graham M., Adrian P. Mander, Alun Bedding, Kristian Brock, Victoria Cornelius, Andrew P. Grieve, Thomas Jaki, et al. 2019. “How to Design a Dose-Finding Study Using the Continual Reassessment Method.” BMC Medical Research Methodology 19 (1). https://doi.org/10.1186/s12874-018-0638-z.\n Yap, Christina, Lucinda J. Billingham, Ying Kuen Cheung, Charlie Craddock, and John O’Quigley. 2017. “Dose Transition Pathways: The Missing Link Between Complex Dose-Finding Designs and Simple Decision-Making.” Clinical Cancer Research 23 (24): 7440–7. https://doi.org/10.1158/1078-0432.CCR-17-0582.\n Yuan, Ying, and Suyu Liu. 2018. BOIN: Bayesian Optimal Interval (Boin) Design for Single-Agent and Drug- Combination Phase I Clinical Trials. https://CRAN.R-project.org/package=BOIN.\n   ","date":1587427200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589396252,"objectID":"301164162db20432f57569dc47a67aa9","permalink":"https://www.kristianbrock.com/post/dose-paths/","publishdate":"2020-04-21T00:00:00Z","relpermalink":"/post/dose-paths/","section":"post","summary":"Enumerate every possible dose selection decision for all dose-finding models implemented in the escalation package.","tags":["escalation","R","DoseFinding"],"title":"Dose-paths in the escalation package","type":"post"},{"authors":null,"categories":null,"content":"escalation is an R package for dose-escalation clinical trials, providing a consistent, extensible, modular approach.\nIt largely uses existing R implementations of popular dose-finding designs, including the continual reassessment method (CRM) design from the dfcrm package, the Bayesian optimal interval (BOIN) design from the BOIN package, and the perennial 3+3.\nescalation bestows these model-fitting functions with a common interface. This allows the provision of add-on behaviours that affect the way that doses are selected, or trial stopping decisions are made. For example, it is simple to compose a CRM design that will not skip doses and will stop once a recommended dose has been given to $n$ patients; or a BOIN design that will demand that a certain dose is tested sufficiently before stopping is countenanced; and so on. Functions are provided to run simulations and enumerate all possible future dose paths. See related blog posts or the package documentation site for many illustrative examples.\nCRAN listing\n https://cran.r-project.org/package=escalation  Source code\n https://github.com/brockk/escalation  Documentation\n https://brockk.github.io/escalation/  ","date":1586563200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587582923,"objectID":"184ae3621da6761dfa48de998d7f1c3d","permalink":"https://www.kristianbrock.com/project/escalation/","publishdate":"2020-04-11T00:00:00Z","relpermalink":"/project/escalation/","section":"project","summary":"_escalation_ is an R package for dose-escalation clinical trials, providing a consistent, extensible, modular approach.","tags":["DoseFinding"],"title":"The escalation package","type":"project"},{"authors":["Kristian Brock"],"categories":null,"content":"About this publication I became involved in the PePS2 trial shortly after joining CRCTU in 2014. I developed a Bayesian statistical method for this trial that would analyse co-primary efficacy and toxicity outcomes whilst adjusting for baseline covariates as a substantial part of my PhD thesis. This publication is important to me because PePS2 became the first trial where I published a statistical design paper and results paper.\n","date":1586131200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586169003,"objectID":"1ce196881bf7be0a1678aec8d32c4f26","permalink":"https://www.kristianbrock.com/publication/peps2-results/","publishdate":"2020-03-19T00:00:00Z","relpermalink":"/publication/peps2-results/","section":"publication","summary":"Therapeutic blockade of the axis of programmed cell death 1 (PD-1) and its ligand (PD-L1) has transformed the management of non-small-cell lung cancer (NSCLC). Clinical trials with pembrolizumab have enrolled patients with performance status (PS) 0–1. However, around 18% of patients with NSCLC are PS2, and the activity and safety of pembrolizumab in these patients is unclear. We aimed to evaluate the safety and efficacy of pembrolizumab in these patients.","tags":["TrialResults","PhaseII"],"title":"Pembrolizumab in patients with non-small-cell lung cancer of performance status 2 (PePS2) - a single arm, phase 2 trial","type":"publication"},{"authors":["Kristian Brock"],"categories":["TrialResults"],"content":"  Summary PePS2 is a phase II clinical trial of pembrolizumab in non-small-cell lung cancer (NSCLC) patients with a performance status of 2. Trial results were recently published in Lancet Respiratory Medicine (Middleton et al. 2020). Previous trials in the KEYNOTE series (Garon et al. 2015; Herbst et al. 2016) had showed that pembrolizumab was efficacious in NSCLC patients.\n The gap in the evidence Performance status (PS) is a variable defined by the Eastern Cooperative Oncology Group to reflect cancer patients’ general well-being and activities of daily life. It is an ordered variable with five levels reflecting greater levels of disability:\n 0 – patients are asymptomatic; 1 – patients are symptomatic but completely ambulatory; 2 – patients are symptomatic, spending up to 50% of day time in bed; 3 – patients are symptomatic, spending at least 50% of day time in bed; 4 – patients are bedbound.  We will say that a patient with a peformance status of 2 is PS2.\nThe KEYNOTE-001 trial (Garon et al. 2015) showed that pembrolizumab was efficacious in NSCLC patients. The subsequent KEYNOTE-010 trial (Herbst et al. 2016) showed that pembrolizumab was superior to docetaxel chemotherapy. However, it is doubtful that a PS2 patient would be strong enough to tolerate chemotherapy. Hence, to maintain equipoise in KEYNOTE-010, the trialists restricted randomisation to PS0 and PS1 patients. That trial was successful and pembrolizumab was licenced in NSCLC. However, as is typical, the treatment was licenced in the patient population that had been investigated in the trial. This covered just the PS0 and PS1 patients and crucially excluded PS2 patients. The KEYNOTE trials had showed that pembrolizumab was tolerable, particularly compared to the harsh chemotherapy alternatives. It is precisely in the PS2 population where a relatively tolerable but effective treatment was sorely needed. However, by virtue of their probable unsuitablility to chemotherapy, PS2 patients had been excluded from a promising new treatment.\nThe PePS2 trial sought to address this gap in the evidence.\nStratification In the KEYNOTE-001 trial, Garon et al. (2015) had introduced the programmed death ligand 1 tumour proportion score biomarker (PD-L1 TPS, or simply TPS), being the percentage of cells in a tumour biopsy that expressed PD-L1. Pembrolizumab is a PD-L1 blockade drug so it was reasonably hypothesised that the treatment would work best in those patients whose tumours expressed lots of PD-L1. The KEYNOTE-001 showed this to be precisely the case.\nKEYNOTE-001 also showed that first-line patients (those patients who had received no previous anti-cancer therapy) achieved outcomes that appeared to be slightly different to patients receiving pembrolizumab as a subsequent-line therapy.\nIn PePS2, we sought to evaluate the effects of pembrolizumab on co-primary efficacy and toxicity outcomes whilst stratifying the analysis for these baseline covariates. I developed a statistical design for this purpose, described here (Brock et al. 2019).\n Results On 19-March-2020, the results were published in Lancet Respiratory Medicine. Alessi and Awad (2020) provided an accompanying commentary of the data in that same journal.\n More Information on the PePS2 project is collated on the project page.\n References Alessi, Joao V, and Mark M Awad. 2020. “Immunotherapy in Lung Cancer: Effective for Patients with Poor Performance Status?” The Lancet Respiratory Medicine, March, S2213260020301077. https://doi.org/10.1016/S2213-2600(20)30107-7.  Brock, Kristian, Lucinda Billingham, Christina Yap, and Gary Middleton. 2019. “A Phase II Clinical Trial Design for Associated Co-Primary Efficacy and Toxicity Outcomes with Baseline Covariates.” In Bayesian Statistics and New Generations, edited by Raffaele Argiento, Daniele Durante, and Sara Wade, 125–33. Springer Proceedings in Mathematics \u0026amp; Statistics. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-30611-3_13.  Garon, Edward B, Naiyer a Rizvi, Rina Hui, Natasha Leighl, Ani S Balmanoukian, Joseph Paul Eder, Amita Patnaik, et al. 2015. “Pembrolizumab for the Treatment of Non-Small-Cell Lung Cancer.” The New England Journal of Medicine 372 (21): 2018–28. https://doi.org/10.1056/NEJMoa1501824.  Herbst, Roy S., Paul Baas, Dong Wan Kim, Enriqueta Felip, José L. Pérez-Gracia, Ji Youn Han, Julian Molina, et al. 2016. “Pembrolizumab Versus Docetaxel for Previously Treated, PD-L1-Positive, Advanced Non-Small-Cell Lung Cancer (KEYNOTE-010): A Randomised Controlled Trial.” The Lancet 387 (10027): 1540–50. https://doi.org/10.1016/S0140-6736(15)01281-7.  Middleton, Gary, Kristian Brock, Joshua Savage, Rhys Mant, Yvonne Summers, John Connibear, Riyaz Shah, et al. 2020. “Pembrolizumab in Patients with Non-Small-Cell Lung Cancer of Performance Status 2 (PePS2): A Single Arm, Phase 2 Trial.” The Lancet Respiratory Medicine 0 (0). https://doi.org/10.1016/S2213-2600(20)30033-3.     ","date":1586131200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1708958956,"objectID":"18e3422d76d70d8a4f29055bdb3ef834","permalink":"https://www.kristianbrock.com/post/peps2-results/","publishdate":"2020-04-06T00:00:00Z","relpermalink":"/post/peps2-results/","section":"post","summary":"Results of the PePS2 trial of pembrolizumab in performance status 2 non-small-cell lung cancer patients published in Lancet Respiratory Medicine.","tags":["Bayes","PhaseII","TrialResults"],"title":"PePS2 Results","type":"post"},{"authors":null,"categories":null,"content":"Summary PePS2 is a phase II trial of pembrolizumab in performance status 2 (PS2) non-small-cell lung cancer (NSCLC) patients. It is run by the Cancer Research UK Clinical Trials Unit.\nPePS2 is an important trial to me because I developed the analysis model as part of my PhD thesis and worked on the trial from almost the very beginning. I published a trial design paper and am glad to say that the trial results are currently under peer review. The investigators and I hope this trial will provide much-needed and much-sought evidence on the merits of giving this PD-L1 blockade drug to PS2 NSCLC patients\nDesign I became involved in PePS2 shortly after joining the trials unit in 2014. The trial called for a design that evaluated co-primary response and toxicity outcomes. Naturally, this suggests a Bryant \u0026amp; Day optimal design. However, published data in performance status 0 \u0026amp; 1 NSCLC patients showed that the PD-L1 tumour proportion score biomarker was strongly predictive of response. There was also evidence that first-line patients did better than subsequent-line patients. We expected each of these variables to remain predictive in the performance status 2 population and wanted to stratify the analysis by these variables. Unfortunately, Bryant \u0026amp; Day\u0026rsquo;s design assumes an homogeneous population so does not admit explanatory variables.\nI happened to be working on a dose-finding trial at the time that used the EffTox design of Thall \u0026amp; Cook (2004) to appraise joint efficacy and toxicity rates at different doses of experimental agents. It struck me on a cycle home that the EffTox design could be adjusted with variables reflecting PD-L1 and line-of-therapy status in place of dose to study our co-primary outcomes whilst adjusting for our putative predictive factors. I worked up the design as part of my PhD, eventually published a design paper, and used the model to conduct a Bayesian analysis of the trial outcomes.\nResults The results for PePS2 were published in March 2020 in Lancet Respiratory Medicine. There are links below.\n","date":1586131200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586169003,"objectID":"972223b45ad93e77c340a6766126073b","permalink":"https://www.kristianbrock.com/project/peps2/","publishdate":"2020-04-06T00:00:00Z","relpermalink":"/project/peps2/","section":"project","summary":"PePS2 is a phase II trial of pembrolizumab in performance status 2 non-small-cell lung cancer patients.","tags":["Bayes","PhaseII"],"title":"The PePS2 Trial","type":"project"},{"authors":["Kristian Brock"],"categories":["Code"],"content":" escalation  escalation is a new R package that takes existing dose-finding models and gives them a common interface. To use the language of tidyverse R, escalation provides a grammar for dose-finding by breaking the dose-finding process into chunks. What model should I use? How should I select dose during the trial? How will I know when to stop? Which restrictions should I place on escalation and de-escalation? You can create the dose-finding design you want in escalation by combining elements that perform all of these tasks. This might all sound a little obtuse. Some examples will make it clear.\nExamples CRM O’Quigley, Pepe, and Fisher (1990) introduced the classic continual reassessment method (CRM) and it has been implemented in many software packages since. One of the most popular R implementations is the dfcrm package by Cheung (2013). Let’s fit a model using dfcrm.\nThe very least information we need to provide is a dose-toxicity skeleton, and our target toxicity level:\nskeleton \u0026lt;- c(0.05, 0.1, 0.25, 0.4, 0.6) target \u0026lt;- 0.25 We use these to create a model-fitting object:\nlibrary(escalation) model \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) The model can then be fit to outcomes. The escalation package uses the outcome syntax introduced for phase I trials in Brock (2019) and for seamless phase I/II trials in Brock et al. (2017). Let’s assume we have treated 3 patients at dose-level 2 and none of them experienced toxicity. We represent this using the outcome string 2NNN. Fitting the model to the set of outcomes invokes the dose-selection algorithm:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN\u0026#39;) and the fit object will tell you the dose recommended by the CRM model to be administered next:\nfit %\u0026gt;% recommended_dose() ## [1] 4 The model advocates skipping straight from dose 2 to dose 4. Clinicians are unlikely to feel comfortable with this. We can respecify the model to expressly not skip doses in escalation:\nmodel \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% dont_skip_doses(when_escalating = TRUE) We have taken the original dfcrm model and added an extra module to prevent skipping doses in escalation. Refitting the new model to the same outcomes gives:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 3 We see that the ensemble now decides to select dose 3. We can ask the trial design whether it wants to keep recruting patients:\nfit %\u0026gt;% continue() ## [1] TRUE Naturally it wants to continue because dfcrm does not implement any stopping rules. However, we can easily add some. Let us say that we want to stop once the model has evaluated 18 patients, or at least 9 at the dose being recommended, whichever occurs first. We specify this model by adding more behaviours:\nmodel \u0026lt;- get_dfcrm(skeleton = skeleton, target = target) %\u0026gt;% dont_skip_doses(when_escalating = TRUE) %\u0026gt;% stop_at_n(n = 18) %\u0026gt;% stop_when_n_at_dose(dose = \u0026#39;recommended\u0026#39;, n = 9) Let’s fit this model to some more patients to see how this trial plays out:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN 3TTN\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 2 fit %\u0026gt;% continue() ## [1] TRUE After seeing two-in-three patients in the second cohort experience toxicity at dose 3, the design understandably wants to de-escalate. Let’s do that:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN 3TTN 2TNN\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 2 fit %\u0026gt;% continue() ## [1] TRUE The third cohort yielded one-in-three tox at dose 2. The design wants to continue at dose 2 so let’s do that:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN 3TTN 2TNN 2NNT\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 2 fit %\u0026gt;% continue() ## [1] FALSE Notice that the call to continue() now returns FALSE. The design wants to stop now and recommend dose 2. It does this because it has seen 9 patients at the recommended dose. We can see the number of patients treated at each of the five doses under investigation:\nfit %\u0026gt;% n_at_dose() ## [1] 0 9 3 0 0 Our stopping criteria have been met. We can verify that dose 2 is indeed the dose with posterior expected toxicity rate closest to our target of 25%:\nfit %\u0026gt;% mean_prob_tox() ## [1] 0.1845713 0.2728713 0.4575229 0.5964102 0.7496662  BOIN escalate also implements the BOIN dose-finding design by Liu and Yuan (2015) via the BOIN R-package (Yuan and Liu 2018).\nIn contrast to CRM, BOIN does not require a dose-toxicity skeleton. In its simplest case, it requires merely the number of doses under investigation and our target toxicity level:\ntarget \u0026lt;- 0.25 model \u0026lt;- get_boin(num_doses = 5, target = target) As before, we can fit the model to some observed outcomes:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 3 fit %\u0026gt;% continue() ## [1] TRUE The BOIN dose selector natively implements stopping rules, as described by Liu \u0026amp; Yuan. For instance, if the bottom dose is too toxic, the design will advise the trial halts:\nfit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NTN 1TTT\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] NA fit %\u0026gt;% continue() ## [1] FALSE Nevertheless, as with the CRM examples above, our BOIN selector can be adorned with various behaviours to tailor stopping and skipping. In fact, we can add the exact same behaviours as before because all escalation objects support exactly the same interface. This makes the package completely modular. We are building the design we want from pieces of Lego:\nmodel \u0026lt;- get_boin(num_doses = 5, target = target) %\u0026gt;% dont_skip_doses(when_escalating = TRUE) %\u0026gt;% stop_at_n(n = 18) %\u0026gt;% stop_when_n_at_dose(dose = \u0026#39;recommended\u0026#39;, n = 9) fit \u0026lt;- model %\u0026gt;% fit(\u0026#39;2NNN 3TTN 2TNN 2NNT\u0026#39;) fit %\u0026gt;% recommended_dose() ## [1] 2 fit %\u0026gt;% continue() ## [1] FALSE fit %\u0026gt;% mean_prob_tox() ## [1] NA 0.23 0.66 NA NA Notice that the posterior toxicity estimate is similar to the CRM model at dose 2, but ultimately different because the two approaches use different model forms. BOIN does not estimate the tox rate at doses that have not been administered.\n Initial escalation plans Another dose-selection mechanism supported by escalation is the concept of an initial escalation plan. These can be used at the start of a trial to show how escalation should proceed initially. As soon as the realised outcomes diverge from the prespecified path, or the path reaches the end, a secondary model takes over.\nFor instance, let us assume we would like to treat one patient per dose so long as no toxicity is seen, in order to facilitate fast escalation. When toxicity is seen, or dose five is reached, we would like to hand control to a CRM model. We can write:\nmodel \u0026lt;- follow_path(\u0026#39;1N 2N 3N 4N 5N\u0026#39;) %\u0026gt;% get_dfcrm(skeleton = skeleton, target = target) So long as the idealised path is realised, it continues:\nmodel %\u0026gt;% fit(\u0026#39;1N\u0026#39;) %\u0026gt;% recommended_dose() ## [1] 2 model %\u0026gt;% fit(\u0026#39;1N 2N\u0026#39;) %\u0026gt;% recommended_dose() ## [1] 3 But if the path is deviated from, the secondary model takes over:\nmodel %\u0026gt;% fit(\u0026#39;1N 2N 3T\u0026#39;) %\u0026gt;% recommended_dose() ## [1] 2 Also, when the initial path is completed, the secondary model continues:\nmodel %\u0026gt;% fit(\u0026#39;1N 2N 3N 4N 5N\u0026#39;) %\u0026gt;% recommended_dose() ## [1] 5   Summary The escalation package takes dose-finding methods that other authors have provided and gives them a consistent interface. This makes it simple to add any behaviour to any method, creating a modular Lego-like approach to creating dose-finding designs. For instance, we can take any dose-selection model and tweak the way it selects the next dose, the way it escalates, de-escalates and stops. I hope eventually that escalation makes it easy to specify, assess and compare all dose-escalation designs.\n Roadmap Version 0.0.1 has been submitted to CRAN (but as of 2020-02-17, not yet accepted) with the following base dose-finding approaches:\n the CRM model from the dfcrm package the BOIN model from the BOIN package the perennial 3+3 model without dose de-escalation  and the following optional embellishments:\n don’t skip doses in escalation and/or de-escalation stop when dose(s) are too toxic stop when \\(n\\) patients have been treated in total stop when \\(n\\) patients have been treated at a particular dose use an initial fixed dose-escalation plan demand at least \\(n\\) patients have been treated at a particular dose before stopping is permitted.  In future versions, the following base dose-finding approaches will probably be added:\n the EWOC model from the EWOC package the CRM and EffTox models from the trialr package the CRM model from the bcrm package the CRM model from the crmPack package  Before I plough into the MCMC methods (trialr, bcrm, crmPack), I want to understand the implications of adding other software to the dependency chain to what at the moment is a very lightweight package.\nIn addition to those, I plan to add further behaviours that allow:\n stopping under the conditions investigated by Zohar and Chevret (2001); selecting dose by the CIBP criterion of Mozgunov and Jaki (2020).  Independent to the work described above, I will add functions that run simulations and calculate dose pathways.\n How escalation came about It had bothered me for several years that it always seemed so difficult to tweak behaviour of dose-finging designs to allow flexible stopping (etc). In my trials unit, we frequently started with the dfcrm code and then added custom embellishments to achieve the design and behaviour we wanted in each particular trial. Running simulations or calculating future dose pathways was never as simple as it should have been. The approach we used of tweaking dfcrm implicitly assumed we needed a more complex dose-fitting function. And then one night at about 4am when I was neither asleep nor awake, I realised that we needed to daisy-chain the dose-selecting classes together to augment behaviour. We did not need a more complex dose-fitting function, we needed a flexible way of combining simple functions. Having used dplyr and tidyverse packages for years now, the %\u0026gt;% operator seemed the natural solution.\n Installation # Once it hits CRAN, install the latest official version with: install.packages(\u0026quot;escalation\u0026quot;) # Alternatively, install the latest code at any time from GitHub: devtools::install_github(\u0026quot;brockk/escalation\u0026quot;)  Resources  GitHub repo Documentation   References Brock, Kristian. 2019. “trialr: Bayesian Clinical Trial Designs in R and Stan.” arXiv E-Prints, June, arXiv:1907.00161.\n Brock, Kristian, Lucinda Billingham, Mhairi Copland, Shamyla Siddique, Mirjana Sirovica, and Christina Yap. 2017. “Implementing the EffTox Dose-Finding Design in the Matchpoint Trial.” BMC Medical Research Methodology 17 (1): 112. https://doi.org/10.1186/s12874-017-0381-x.\n Cheung, Ken. 2013. Dfcrm: Dose-Finding by the Continual Reassessment Method. https://CRAN.R-project.org/package=dfcrm.\n Liu, Suyu, and Ying Yuan. 2015. “Bayesian Optimal Interval Designs for Phase I Clinical Trials.” Journal of the Royal Statistical Society: Series C (Applied Statistics) 64 (3): 507–23. https://doi.org/10.1111/rssc.12089.\n Mozgunov, Pavel, and Thomas Jaki. 2020. “Improving Safety of the Continual Reassessment Method via a Modified Allocation Rule.” Statistics in Medicine, 1–17. https://doi.org/10.1002/sim.8450.\n O’Quigley, J, M Pepe, and L Fisher. 1990. “Continual Reassessment Method: A Practical Design for Phase 1 Clinical Trials in Cancer.” Biometrics 46 (1): 33–48. https://doi.org/10.2307/2531628.\n Yuan, Ying, and Suyu Liu. 2018. BOIN: Bayesian Optimal Interval (Boin) Design for Single-Agent and Drug- Combination Phase I Clinical Trials. https://CRAN.R-project.org/package=BOIN.\n Zohar, Sarah, and Sylvie Chevret. 2001. “The Continual Reassessment Method: Comparison of Bayesian Stopping Rules for Dose-Ranging Studies.” Statistics in Medicine 20 (19): 2827–43. https://doi.org/10.1002/sim.920.\n    ","date":1581552000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587582923,"objectID":"f5d2cff649c0160ead59c3a57b8a82ab","permalink":"https://www.kristianbrock.com/post/introducing-escalation/","publishdate":"2020-02-13T00:00:00Z","relpermalink":"/post/introducing-escalation/","section":"post","summary":"An R package to unify the interface of dose-escalation models in R. A modular approach that is scalable and extensible.","tags":["escalation","R"],"title":"Introducing escalation","type":"post"},{"authors":["Kristian Brock"],"categories":["Teaching"],"content":" At CRCTU, we recently ran our bootcamp course for the first time, a programme of core technical training for newly recruited biostatisticians.\nClinical trials units are busy centres of research where collaboration is the default. Being able to visualise data and communicate technical details to others quickly and effectively is important. Being able to reproduce something you calculated last month is necessary. R Markdown addresses both of these problems by interweaving prose and code to produce rich, interactive documents in … whatever format you need.\nHere is RStudio explaining better than I could:\n   R Markdown is super flexible. Some things I have created in it are:\n A complete journal article, including abstract, authors and affiliations, keywords, figures and tables with captions, cross-referencing, bibliography (link to source) Literally this exact webpage you are reading right now (link to source) Interactive tutorials at https://rstudio.cloud/project/454702. Look for the Run.R file to launch a tutorial. (link to source)  In each example, the source code is written 100% in R Markdown and then compiled to create the article PDF or the web page or the Word doc or whatever. To emphasise that point, I have provided a link to the source Rmd file in each instance.\nThe R users at CRCTU use R Markdown files to conduct trial analyses and produce DMC reports. We trained new statisticians in this area because we knew that it is not the kind of thing universities would teach in their MSc programmes. However, reproducible research is one of the core pillars of our bootcamp programme and we see R Markdown as the key technology in this area.\nDo you train statisticians in this area at your institution? Do you want to? Are you a statistician that wishes they had access to this type of training? If so, feel free to get in contact and we could bring it to your CTU.\nAlso, please fill in our brief questionnaire on how CTUs train statisticians!\nLoading…  Thanks!\n","date":1579392000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579941193,"objectID":"be4e44c4c4c1f7894434f377c99727eb","permalink":"https://www.kristianbrock.com/post/rmarkdown-in-trials/","publishdate":"2020-01-19T00:00:00Z","relpermalink":"/post/rmarkdown-in-trials/","section":"post","summary":"RMarkdown is a key tool for communicating research. We teach it to new starters at CRCTU.","tags":["bootcamp","training"],"title":"R Markdown is a miracle for scientific communication and repeatable research","type":"post"},{"authors":["Kristian Brock"],"categories":["Research"],"content":"During 2019, I was working on simulations using CRM designs in several different trials. I found I would frequently get the designs mixed up:\n \u0026ldquo;We are targeting 20% toxicity in this trial, right? No, that was the other trial\u0026hellip;we are targeting 33% here\u0026hellip;\u0026rdquo;\n Similarly, once or twice, I got to the stage where I wanted to run simulations only to discover we had not specified some important design aspect, like when the trial should stop. To bring all the pertinent information to the fore, I wrote a checklist. I would take the list and fill it out for each trial to ensure I had all the right information before I started simulating.\nDownload the checklist as PDF, editable Word version, or completed example.\nChecklist 1. Doses under investigation? Put simply, which doses are you investigating? And how many are there? Let\u0026rsquo;s refer to the number of doses as $n$. For the plain vanilla CRM, the doses should be fully orderable, meaning it should be possible to unambiguously state that $a \u0026gt; b$ or $a \u0026lt; b$ for each pair of doses $a, b$. Incidentally, this is also true of the 3+3. It is easy to inadvertently violate the total orderability rule when you have combinations (e.g. is 10mg A + 10mb B a greater or lesser dose than 5mg A + 20mg B?) or when you are varying doses and frequencies (e.g. is 20mg of A each day a greater or lesser dose than 100mg of A once per week?).\n2. Target toxicity level? What probability of dose-limiting toxicity are you targeting? CRM and 3+3 are toxicity-chasing designs - they will escalate dose until toxicity is seen. There must be a rationale for why escalation is anticipated to be beneficial to the patient. So what probability of toxicity are you targeting? If it is hard to specify an acceptable target, or the target is very low, that might be a sign that CRM and 3+3 are not suitable approaches.\n3. Skeleton? What is your a-priori expectation of the rate of toxicity at each dose? This should be a monotonically-increasing vector of probabilities of length $n$.\n4. Starting dose? Which dose will you start at? Having a dose or two to de-escalate to might be preferable in case your toxicity expectations are wrong.\n5. Model type? There have been various suggestions to model the dose-toxicity curve. Will you use the empiric approach, or a one parameter logisitic approach, etc?\n6. Model parameters? Different model types require different parameters and hyperparameters. E.g. the empiric model shifts the skeleton up and down as DLT outcomes are evaluated in patients, using a single parameter, often called $\\beta$. That parameter needs a prior distribution. The default prior on $\\beta$ in dfcrm is $\\beta \\sim N(0, 1.34)$. I will let you research why.\n7. How to select dose? Will you select the dose with estimated DLT probability closest to the target? Or closest to target without exceeding the target? Will you permit skipping doses in escalation? How about de-escalation?\n8. When to stop? Trials end1 - when will your trial end? What is the maximum sample size? Do you have a stopping rule for excess toxicity? Do you want to evaluate a minimum number of patients at the candidate dose before you stop? Also, check that these constraints do not contradict one another!\n9. Length of DLT assessment window? How long is the DLT assessment window?\nIf using non-time-to-event method: 10. How to select cohort size? Commonly, designs have used fixed cohort sizes of three. But perhaps you want to use flexible cohort sizes of 2-5 patients, depending on the times at which the patients arrive? How will you simulate this?\nIf using time-to-event method: 11. How to calculate weight of observation? Under the Time-to-Event CRM (TITE-CRM), censored observations of non-DLT are weighted somewhere between 0 and 1. Logically, the weight should be a non-decreasing function of the length of follow-up. If DLT is experienced, the weight should be 1. Several weight functions have been proposed. A simple option is linear, i.e. 50% of the evaluation period without DLT is considered to be 0.5 non-DLT events.\nFor simulation: 12. What is assumed true Prob(DLT)? The key simulation parameter, what is the true probability of DLT at each dose? It will be tempting to choose a true dose-DLT curve that looks similar to your skeleton but do not stop there. Naturally, a thorough simulation study will look at many true dose-DLT curves, with the sought dose appearing at different positions. If you have a rule for early stopping, you might want to consider a scenario where the true DLT probabilities are all too high.\nFor simulation using time-to-event method: 13. What is time between patient arrivals? When simulating using the TITE-CRM method, you will need to randomly sample patient arrival times. For memoryless waiting times, the exponential distribution would do the job.\n14. What is time between patient arrivals? Generally in simulation, you sample whether toxicity will happen in a patient given their assigned dose and the associated probability of DLT using a random draw from a Bernoulli distribution. Once you have established that toxicity occurs in a given patient, you will need to sample the time of the DLT. How will you do that? You might assume a constant hazard, for example, and thus use an exponential distribution. Obviously, if a patient does not experience DLT then their DLT time is infinite.\nAvailability of software Having made all these choices (and it is exhausting to even think of all these things), you then have to find or write code to make it happen. You may find you do not have the time or programming skill to write exactly what you want and opt for an off-the-shelf solution. Each of dfcrm, bcrm, and crmPack offer methods for simulating CRM trials, and my very own trialr will have CRM simulation methods soon. However, each differs in what they offer (that feels like a blog post for another day). You may discover that no off-the-shelf package does exactly what you want and find yourself tweaking your choices above in light of what is feasible. It is an iterative process.\nRead more Graham Wheeler and co-authors 2 wrote a tutorial for designing dose-finding trials using the CRM. You can read more about that article here.\nFootnotes   even STAMPEDE, one imagines. \u0026#x21a9;\u0026#xfe0e;\n Wheeler, G.M., Mander, A.P., Bedding, A., Brock, K., Cornelius, V., Grieve, A.P., Jaki, T., Love, S.B., Odondi, L., Weir, C.J., Yap, C., Bond, S.J., 2019. How to design a dose-finding study using the continual reassessment method. BMC Medical Research Methodology 19. https://doi.org/10.1186/s12874-018-0638-z \u0026#x21a9;\u0026#xfe0e;\n   ","date":1579046400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579936060,"objectID":"6ca6942914f0140b92d4a5bee480abcb","permalink":"https://www.kristianbrock.com/post/crm-simulations-checklist/","publishdate":"2020-01-15T00:00:00Z","relpermalink":"/post/crm-simulations-checklist/","section":"post","summary":"During 2019, I was working on simulations using CRM designs in several different trials. I found I would frequently get the designs mixed up:\n \u0026ldquo;We are targeting 20% toxicity in this trial, right? No, that was the other trial\u0026hellip;we are targeting 33% here\u0026hellip;\u0026rdquo;\n Similarly, once or twice, I got to the stage where I wanted to run simulations only to discover we had not specified some important design aspect, like when the trial should stop.","tags":["DoseFinding","CRM"],"title":"CRM Simulation Checklist","type":"post"},{"authors":["Kristian Brock"],"categories":[""],"content":" I have started this site to record things I am working on in R during my duties as an academic clinical trial statistician.\nFingers crossed.\n","date":1577404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579936060,"objectID":"8bf2a2dd1be8f912066ddc1e3092b3e6","permalink":"https://www.kristianbrock.com/post/first-post/first-post/","publishdate":"2019-12-27T00:00:00Z","relpermalink":"/post/first-post/first-post/","section":"post","summary":"I have a new website and blog. I hope to share stuff I am working on.","tags":null,"title":"First post","type":"post"},{"authors":null,"categories":null,"content":"trialr is an R package that implements Bayesian clinical trial design in Stan, a modern enviroment for probabilistic programming that implements Hamiltonian Monte Carlo Markov Chain sampling. Bayesian models are relatively abundant in early phase clinical trials where information is scarce and sensible inference is required practically from the moment the trial begins.\ntrialr implements:\n the Contimual Reassessment Method (CMR) for toxicity-based dose-finding; the time-to-event CRM for late-onset toxicity in dose-finding; the EffTox for toxicity- and efficacy-based dose-finding; Wason \u0026amp; Seaman\u0026rsquo;s Augmented Binary method for fusing continuous and binary outcomes in phase II; a hierarchical model of binary responses on related subgroups; and more.  trialr is available on CRAN and is listed on my GitHub page. There is a manuscript currently under peer-review (pre-print linked below) and it has been used to analyse outcomes in a forthcoming set of clinical trial results.\nCRAN listing\n https://cran.r-project.org/package=trialr  Source code\n https://github.com/brockk/trialr  Documentation\n https://brockk.github.io/trialr/  ","date":1577404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587582923,"objectID":"d5aee8e6d1d55e684b37e999b3076d60","permalink":"https://www.kristianbrock.com/project/trialr/","publishdate":"2019-12-27T00:00:00Z","relpermalink":"/project/trialr/","section":"project","summary":"_trialr_ is an R package implementing Bayesian clinical trial methods in Stan.","tags":["Bayes"],"title":"The trialr package","type":"project"},{"authors":["Kristian Brock","Lucinda Billingham","Christina Yap","Gary Middleton"],"categories":null,"content":"About this publication Getting this paper published was a big deal for me because it was the first design idea I had had that was completely my own. Well, so I thought. An erudite peer-reviewer pointed out that the method (which I had named Bayesian Evaluation of Bivariate Outcomes and Predictive variables, or BEBOP) was actually a special case of a design by Thall, Nguyen \u0026amp; Estey. In response, I re-wrote the paper presenting the design as a novel refinement of their method suitable for phase II trials, called P2TNE for Phase II Thall Nguyen \u0026amp; Estey. Anyway, after being rejected twice from big journals, it was a big relief to get the paper published in the BAYSM2018 conference proceedings. It was especially classy of Springer to give a complementary hard cover copy of the book to each contributing author.\n","date":1574380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"2ac3fd569218664cfcee38501d1f809d","permalink":"https://www.kristianbrock.com/publication/peps2-design/","publishdate":"2019-11-22T00:00:00Z","relpermalink":"/publication/peps2-design/","section":"publication","summary":"The experimental design presented here is motivated by a phase II clinical trial called PePS2, investigating the efficacy and safety of an immunotherapy called pembrolizumab in a specific subgroup of lung cancer patients.","tags":["Bayes"],"title":"A Phase II Clinical Trial Design for Associated Co-primary Efficacy and Toxicity Outcomes with Baseline Covariates","type":"publication"},{"authors":["Kristian Brock"],"categories":null,"content":"About this publication This publication is important to me because Clarity was my first successful grant application. It is a simple trial with modest sample size but the results are absolutely amazing, with an iwCLL response rate of 89% and minimum disease negative status achieved in the peripheral blood of 53% of patients.\n","date":1562803200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"3a560fde1593e4412d421ef102224fad","permalink":"https://www.kristianbrock.com/publication/clarity-results/","publishdate":"2019-07-11T00:00:00Z","relpermalink":"/publication/clarity-results/","section":"publication","summary":"The treatment of chronic lymphocytic leukemia (CLL) has been revolutionized by targeted therapies that either inhibit proliferation (ibrutinib) or reactivate apoptosis (venetoclax). Both significantly improve survival in CLL and replace chemoimmunotherapy for many patients. However, individually, they rarely lead to eradication of measurable residual disease (MRD) and usually are taken indefinitely or until progression. We present the CLARITY trial...","tags":["TrialResults","PhaseII"],"title":"Ibrutinib Plus Venetoclax in Relapsed/Refractory Chronic Lymphocytic Leukemia - The CLARITY Study","type":"publication"},{"authors":["Kristian Brock"],"categories":null,"content":"About this publication I became aware of Stan whilst working on some Bayesian clinical trial designs. I recall using Monte Carlo integration to resolve six-dimensional integrals to estimate posterior means and thinking that there must be a better way. In fact, there were probably many better ways. However, I doubt any would be as good as Stan, a probabilistic programming language and Hamiltonion Monte Carlo Markov Chain sampler. This manuscript is my first sole-author attempt at research. It was particularly pleasing to implement James Wason and Shaun Seaman\u0026rsquo;s augmented binary method, an approach that will surely feature strongly if we are to wean ourselves off information-light binary response variables. trial is on CRAN.\n","date":1561766400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"a6abbdde3e271c9cb6805ede176cf779","permalink":"https://www.kristianbrock.com/publication/trialr/","publishdate":"2019-06-29T00:00:00Z","relpermalink":"/publication/trialr/","section":"publication","summary":"This manuscript introduces an R package called trialr that implements a collection of clinical trial methods in Stan and R. In this article, we explore three methods in detail...","tags":["trialr","Bayes"],"title":"trialr - Bayesian Clinical Trial Designs in R and Stan","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577611673,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://www.kristianbrock.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Graham Wheeler","Adrian Mander","Alun Bedding","Kristian Brock","Victoria Cornelius","Andrew Grieve","Thomas Jaki","Sharon Love","Lang'o Odondi","Christopher Weir","Christina Yap","Simon Bond"],"categories":null,"content":"About this publication I had been a trial statistician about 6 months when I attended an NIHR workshop on early phase trial methodology in 2014. The topic of the day was the trials community\u0026rsquo;s over-reliance on rule-based dose-finding methods like 3+3. This tutorial paper was produced by a group of attendees to promote model-based methods.\n","date":1547769600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"857c89e52a573c3631ffe2023efd556e","permalink":"https://www.kristianbrock.com/publication/crm-tutorial/","publishdate":"2019-01-18T00:00:00Z","relpermalink":"/publication/crm-tutorial/","section":"publication","summary":"The continual reassessment method (CRM) is a model-based design for phase I trials, which aims to find the maximum tolerated dose (MTD) of a new therapy. The CRM has been shown to be more accurate in targeting the MTD than traditional rule-based approaches such as the 3 + 3 design, which is used in most phase I trials.","tags":["DoseFinding","Bayes"],"title":"How to design a dose-finding study using the continual reassessment method","type":"publication"},{"authors":["Charles Craddock","Daniel Slade","Carmela De Santo","Rachel Wheat","Paul Ferguson","Andrea Hodgkinson","Kristian Brock","Jamie Cavenagh","Wendy Ingram","Mike Dennis","Ram Malladi","Shamyla Siddique","Francis Mussai","Christina Yap"],"categories":null,"content":"About this publication This paper is important to me because Viola was the first dose-finding trial that I worked on. It uses a CRM model to identify a dose of lenalidomide that is tolerable when given with azacitidine to AML and MDS patients. This was also one of my first published sets of trial results.\n","date":1547683200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"e411431ae1cf73154cf35ce452672707","permalink":"https://www.kristianbrock.com/publication/viola-results/","publishdate":"2019-01-17T00:00:00Z","relpermalink":"/publication/viola-results/","section":"publication","summary":"Salvage options for patients who relapse after allogeneic stem-cell transplantation (allo-SCT) for acute myeloid leukemia (AML) and myelodysplasia (MDS) remain limited, and novel treatment strategies are required. Both lenalidomide (LEN) and azacitidine (AZA) possess significant antitumor activity effect in AML.","tags":["TrialResults","DoseFinding","Bayes"],"title":"Combination Lenalidomide and Azacitidine - A Novel Salvage Therapy in Patients Who Relapse After Allogeneic Stem-Cell Transplantation for Acute Myeloid Leukemia","type":"publication"},{"authors":["Kristian Brock","Lucinda Billingham","Mhairi Copland","Shamyla Siddique","Mirjana Sirovica","Christina Yap"],"categories":null,"content":"About this publication This was my first first-author publication and a chapter in my PhD thesis. Working with EffTox was great, but challenging at times. The seamless phase I/II approach to dose-finding, where efficacy and toxicity outcomes guide dose selection, has never been more important in this era of targeted therapies in oncology. However, the EffTox design and the suite of phase I/II methods in general have been relatively underutilised. We hope this paper demonstrating our experiences with EffTox will inspire early phase trialists to look further than the 3+3.\n","date":1500508800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578603720,"objectID":"3ed4857002ffa139b320f3d42e1cdb85","permalink":"https://www.kristianbrock.com/publication/matchpoint-design/","publishdate":"2017-07-20T00:00:00Z","relpermalink":"/publication/matchpoint-design/","section":"publication","summary":"The Matchpoint trial aims to identify the optimal dose of ponatinib to give with conventional chemotherapy consisting of fludarabine, cytarabine and idarubicin to chronic myeloid leukaemia patients in blastic transformation phase. The dose should be both tolerable and efficacious. This paper describes our experience implementing EffTox in the Matchpoint trial.","tags":["DoseFinding","Bayes"],"title":"Implementing the EffTox dose-finding design in the Matchpoint trial","type":"publication"}]